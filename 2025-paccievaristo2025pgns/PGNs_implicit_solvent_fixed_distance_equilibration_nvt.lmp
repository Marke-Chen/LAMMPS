# NVT Equilibration of Pair of PGNs at Fixed Distance in Implicit Solvent

# Overview
# This LAMMPS input file sets up a LAMMPS simulation that performs NVT time integration of the equations of motion for the non-grafted monomers and for the monomer-grafted nanoparticles in the system described in PGNs_implicit_solvent_fixed_distance_soft_pushoff.restart.${end_timesteps_soft_pushoff}. The initial velocities of all particles are zero. The forces acting on the centers of mass of the monomer-grafted nanoparticles are calculated every timestep but not applied to them. Such constraints enforce that the positions of the centers of mass of the monomer-grafted nanoparticles do not vary through time. All values in this input file are provided and generated in the LAMMPS LJ unit system.
# The particles in PGNs_implicit_solvent_fixed_distance_soft_pushoff.restart.${end_timesteps_soft_pushoff} are identified in LAMMPS as:
# * Grafted Monomers: type 1
# * Non-Grafted Monomers: type 2
# * Nanoparticles: type 3

# Physics Setup
units           lj
atom_style      molecular

# System Setup
variable        end_timesteps_soft_pushoff file time.txt
# End of the Soft Pushoff run in timesteps.
read_restart    PGNs_implicit_solvent_fixed_distance_soft_pushoff.restart.${end_timesteps_soft_pushoff}
# Restart file PGNs_implicit_solvent_fixed_distance_soft_pushoff.restart.${end_timesteps_soft_pushoff} generated by the Soft Pushoff run using the input file PGNs_implicit_solvent_fixed_distance_soft_pushoff.lmp and the data file PGNs_implicit_solvent_fixed_distance.dat.

${atom_id_group_statement_mgn1}
${atom_id_group_statement_mgn2}
# Variables above expanded by the Python 3 script make_data_PGNs_implicit_solvent_fixed_distance.py.
group           mgns union mgn1 mgn2
# Line above to reflect the number of monomer-grafted nanoparticles in the system.
${atom_id_group_statement_pgn1}
${atom_id_group_statement_pgn2}
# Variables above expanded by the Python 3 script make_data_PGNs_implicit_solvent_fixed_distance.py.
group           pgns union pgn1 pgn2
# Line above to reflect the number of polymer-grafted nanoparticles in the system.
${atom_id_group_statement_np1}
${atom_id_group_statement_np2}
# Variables above expanded by the Python 3 script make_data_PGNs_implicit_solvent_fixed_distance.py.
group           nps union np1 np2
# Line above to reflect the number of nanoparticles in the system.
${atom_id_group_statement_selgraftmon1}
${atom_id_group_statement_selgraftmon2}
# Variables above expanded by the Python 3 script make_data_PGNs_implicit_solvent_fixed_distance.py.
# Each selected grafted monomer to be the first grafted monomer attached to each nanoparticle in the system.
group           selgraftmons union selgraftmon1 selgraftmon2
# Line above to reflect the number of selected grafted monomers in the system.
group           nongraftmons type 2
# Non-grafted monomers set to particle type 2.
group           allmons type 1 2
# Monomers set to particle type 1 if grafted and to particle type 2 if non-grafted.
compute         chunkatomall all chunk/atom molecule
# Particles are grouped in chunks according to molecule-ID.

bond_style      fene
bond_coeff      1 30. 1.5 1. 1.
special_bonds   fene
# Monomers belonging to the same grafted chain bonded by finitely extensible nonlinear elastic bonds.

variable        radius_nanoparticles file radius_nanoparticles.txt
# The value of radius_nanoparticles is specified in and obtained from radius_nanoparticles.txt.
if "${radius_nanoparticles} == 2.500000" then "variable        skin equal 1.9"
if "${radius_nanoparticles} == 5.000000" then "variable        skin equal 1.3"
if "${radius_nanoparticles} == 7.500000" then "variable        skin equal 1.1"
if "${radius_nanoparticles} == 10.000000" then "variable        skin equal 0.8"
neighbor        ${skin} multi
# Use of multi binning algorithm made necessary by the difference in size between nanoparticles and monomers.
if "${radius_nanoparticles} == 2.500000" then "variable        one equal 1000"
if "${radius_nanoparticles} == 5.000000" then "variable        one equal 2000"
if "${radius_nanoparticles} == 7.500000" then "variable        one equal 3950"
if "${radius_nanoparticles} == 10.000000" then "variable        one equal 4300"
variable        page equal 10*${one}
neigh_modify    every 1 delay 0 check yes page ${page} one ${one}
# Tuning of the memory allocated to neighbor lists made necessary by the large number of particles in the system. The values of "page" and "one" are set according to the maximum total number of particles in the system for the given radius of the nanoparticles.
neigh_modify    exclude molecule/inter mgn1
neigh_modify    exclude molecule/inter mgn2
# Interactions between particles belonging to the same monomer-grafted nanoparticle are turned off because monomer-grafted nanoparticles are constructed as rigid bodies. Computational optimization ensues.
comm_modify     mode multi

velocity        all set 0. 0. 0.
# Initial velocities of all particles set to zero.

# Simulation Setup
variable        epsilon_mon_mon_attractive file eps.txt
# The value of epsilon_mon_mon_attractive is specified in and obtained from eps.txt. The value of epsilon_mon_mon_attractive solely controls the quality of the implicit solvent in this model and is expected to be specified by the user. Suggested values of epsilon_mon_mon_attractive lie in the range [0., .6]. Lower values of epsilon_mon_mon_attractive are linked to good solvents. Higher values of epsilon_mon_mon_attractive are linked to poor solvents.

timestep        .005
# Timestep in tau.
variable        dumping_interval_timesteps equal 1000
# Interval between every two data dumps in timesteps.
variable        end_timesteps_equilibration_nvt equal 6000000+40000000*${epsilon_mon_mon_attractive}
# End of the NVT Equilibration run in timesteps.
variable        step equal step
# Time in timesteps. Creation of variable counterpart to thermo keyword "step."
variable        time equal time+${end_timesteps_soft_pushoff}*dt
# Time in tau. Creation of variable counterpart to thermo keyword "time."

thermo          ${dumping_interval_timesteps}
thermo_style    custom step v_time temp press vol ke pe ebond evdwl lx ly lz
# vol, lx, ly, and lz not to vary and only printed as extra control tool.

# NVT Equilibration
variable        reference_polymer_melt_monomer_bulk_density equal .88
variable        Hamaker_constant_mon_mon_attractive equal ${epsilon_mon_mon_attractive}*144.
variable        Hamaker_constant_mon_mon_repulsive_complementary equal (1.-${epsilon_mon_mon_attractive})*144.
variable        Hamaker_constant_mon_np_attractive equal ${epsilon_mon_mon_attractive}*${reference_polymer_melt_monomer_bulk_density}*24.*PI
variable        Hamaker_constant_mon_np_repulsive_complementary equal (1.-${epsilon_mon_mon_attractive})*${reference_polymer_melt_monomer_bulk_density}*24.*PI
variable        Hamaker_constant_np_np_attractive equal ${epsilon_mon_mon_attractive}*${reference_polymer_melt_monomer_bulk_density}*${reference_polymer_melt_monomer_bulk_density}*4.*PI*PI
variable        Hamaker_constant_np_np_repulsive_complementary equal (1.-${epsilon_mon_mon_attractive})*${reference_polymer_melt_monomer_bulk_density}*${reference_polymer_melt_monomer_bulk_density}*4.*PI*PI
pair_style      hybrid/overlay colloid 1.122462 colloid 2.5 colloid ${minimum_mon_np} colloid ${cutoff_mon_np} colloid ${minimum_np_np} colloid ${cutoff_np_np}
pair_modify     shift yes
pair_coeff      1 1 colloid 1 ${Hamaker_constant_mon_mon_repulsive_complementary} 1. 0. 0.
pair_coeff      1 1 colloid 2 ${Hamaker_constant_mon_mon_attractive} 1. 0. 0.
pair_coeff      1 2 colloid 1 ${Hamaker_constant_mon_mon_repulsive_complementary} 1. 0. 0.
pair_coeff      1 2 colloid 2 ${Hamaker_constant_mon_mon_attractive} 1. 0. 0.
pair_coeff      1 3 colloid 3 ${Hamaker_constant_mon_np_repulsive_complementary} 1. 0. ${diameter_nps}
pair_coeff      1 3 colloid 4 ${Hamaker_constant_mon_np_attractive} 1. 0. ${diameter_nps}
pair_coeff      2 2 colloid 1 ${Hamaker_constant_mon_mon_repulsive_complementary} 1. 0. 0.
pair_coeff      2 2 colloid 2 ${Hamaker_constant_mon_mon_attractive} 1. 0. 0.
pair_coeff      2 3 colloid 3 ${Hamaker_constant_mon_np_repulsive_complementary} 1. 0. ${diameter_nps}
pair_coeff      2 3 colloid 4 ${Hamaker_constant_mon_np_attractive} 1. 0. ${diameter_nps}
pair_coeff      3 3 colloid 5 ${Hamaker_constant_np_np_repulsive_complementary} 1. ${diameter_nps} ${diameter_nps}
pair_coeff      3 3 colloid 6 ${Hamaker_constant_np_np_attractive} 1. ${diameter_nps} ${diameter_nps}
# Analytic and graphic descriptions of the hybrid colloid potentials above provided in the file pair_potentials_PGNs_implicit_solvent_equilibration_nvt_${radius_nanoparticles}.docx. Hybrid colloid potentials are constructed just so nanoparticles and monomers display the same hardness across simulations performed with different values of epsilon_mon_mon_attractive.

variable        number_values_mon_np equal 1000.*${cutoff_mon_np}
variable        number_values_np_np equal 1000.*${cutoff_np_np}
pair_write      1 1 2500 r .001 2.5 pair_potential_1_1.txt Hybrid_Colloid_Colloid_1_1
pair_write      1 2 2500 r .001 2.5 pair_potential_1_2.txt Hybrid_Colloid_Colloid_1_2
pair_write      1 3 ${number_values_mon_np} r .001 ${cutoff_mon_np} pair_potential_1_3.txt Hybrid_Colloid_Colloid_1_3
pair_write      2 2 2500 r .001 2.5 pair_potential_2_2.txt Hybrid_Colloid_Colloid_2_2
pair_write      2 3 ${number_values_mon_np} r .001 ${cutoff_mon_np} pair_potential_2_3.txt Hybrid_Colloid_Colloid_2_3
pair_write      3 3 ${number_values_np_np} r .001 ${cutoff_np_np} pair_potential_3_3.txt Hybrid_Colloid_Colloid_3_3
# Printing of the pair potentials over interparticle separation distance as extra control tool.

fix             nvtnongraftmons nongraftmons nvt temp 1. 1. 1.
# NVT time integration of the equations of motion for the non-grafted monomers.
fix             rigidnvtmgns mgns rigid/nvt group 2 mgn1 mgn2 temp 1. 1. 1. force * off off off
# NVT time integration of the equations of motion for the monomer-grafted nanoparticles constructed as rigid bodies.
variable        f_rigidnvtmgns_1_1 equal f_rigidnvtmgns[1][1]
variable        f_rigidnvtmgns_1_2 equal f_rigidnvtmgns[1][2]
variable        f_rigidnvtmgns_1_3 equal f_rigidnvtmgns[1][3]
variable        f_rigidnvtmgns_2_1 equal f_rigidnvtmgns[2][1]
variable        f_rigidnvtmgns_2_2 equal f_rigidnvtmgns[2][2]
variable        f_rigidnvtmgns_2_3 equal f_rigidnvtmgns[2][3]
fix             printmgn1 mgn1 print ${dumping_interval_timesteps} "${step} ${time} ${f_rigidnvtmgns_1_1} ${f_rigidnvtmgns_1_2} ${f_rigidnvtmgns_1_3}" file position_equilibration_nvt_mgn1.txt screen no
fix             printmgn2 mgn2 print ${dumping_interval_timesteps} "${step} ${time} ${f_rigidnvtmgns_2_1} ${f_rigidnvtmgns_2_2} ${f_rigidnvtmgns_2_3}" file position_equilibration_nvt_mgn2.txt screen no
# Printing of the components of the positions of the centers of mass of the monomer-grafted nanoparticles through time.
variable        position_np1_x equal xcm(np1,x)
variable        position_np1_y equal xcm(np1,y)
variable        position_np1_z equal xcm(np1,z)
variable        position_np2_x equal xcm(np2,x)
variable        position_np2_y equal xcm(np2,y)
variable        position_np2_z equal xcm(np2,z)
fix             printnp1 np1 print ${dumping_interval_timesteps} "${step} ${time} ${position_np1_x} ${position_np1_y} ${position_np1_z}" file position_equilibration_nvt_np1.txt screen no
fix             printnp2 np2 print ${dumping_interval_timesteps} "${step} ${time} ${position_np2_x} ${position_np2_y} ${position_np2_z}" file position_equilibration_nvt_np2.txt screen no
# Printing of the components of the positions of the nanoparticles through time.
variable        position_selgraftmon1_x equal xcm(selgraftmon1,x)
variable        position_selgraftmon1_y equal xcm(selgraftmon1,y)
variable        position_selgraftmon1_z equal xcm(selgraftmon1,z)
variable        position_selgraftmon2_x equal xcm(selgraftmon2,x)
variable        position_selgraftmon2_y equal xcm(selgraftmon2,y)
variable        position_selgraftmon2_z equal xcm(selgraftmon2,z)
fix             printselgraftmon1 selgraftmon1 print ${dumping_interval_timesteps} "${step} ${time} ${position_selgraftmon1_x} ${position_selgraftmon1_y} ${position_selgraftmon1_z}" file position_equilibration_nvt_selgraftmon1.txt screen no
fix             printselgraftmon2 selgraftmon2 print ${dumping_interval_timesteps} "${step} ${time} ${position_selgraftmon2_x} ${position_selgraftmon2_y} ${position_selgraftmon2_z}" file position_equilibration_nvt_selgraftmon2.txt screen no
# Printing of the components of the positions of the selected grafted monomers through time.
compute         gyrationchunkall all gyration/chunk chunkatomall
fix             avetimeall all ave/time 1 ${dumping_interval_timesteps} ${dumping_interval_timesteps} c_gyrationchunkall file average_radii_of_gyration_equilibration_nvt.txt mode vector
# Calculation and printing of time block averages of the radii of gyration of all molecules in the system through time.
variable        f_rigidnvtmgns_1_7 equal f_rigidnvtmgns[1][7]
variable        f_rigidnvtmgns_1_8 equal f_rigidnvtmgns[1][8]
variable        f_rigidnvtmgns_1_9 equal f_rigidnvtmgns[1][9]
variable        f_rigidnvtmgns_2_7 equal f_rigidnvtmgns[2][7]
variable        f_rigidnvtmgns_2_8 equal f_rigidnvtmgns[2][8]
variable        f_rigidnvtmgns_2_9 equal f_rigidnvtmgns[2][9]
fix             avetimemgn1 mgn1 ave/time 1 ${dumping_interval_timesteps} ${dumping_interval_timesteps} v_time v_f_rigidnvtmgns_1_7 v_f_rigidnvtmgns_1_8 v_f_rigidnvtmgns_1_9 file average_force_equilibration_nvt_mgn1.txt mode scalar off 1
fix             avetimemgn2 mgn2 ave/time 1 ${dumping_interval_timesteps} ${dumping_interval_timesteps} v_time v_f_rigidnvtmgns_2_7 v_f_rigidnvtmgns_2_8 v_f_rigidnvtmgns_2_9 file average_force_equilibration_nvt_mgn2.txt mode scalar off 1
# Calculation and printing of time block averages of the components of the forces acting on the centers of mass of the monomer-grafted nanoparticles through time.
compute         reducepgn1 pgn1 reduce sum fx fy fz
compute         reducepgn2 pgn2 reduce sum fx fy fz
fix             avetimepgn1 pgn1 ave/time 1 ${dumping_interval_timesteps} ${dumping_interval_timesteps} v_time c_reducepgn1[1] c_reducepgn1[2] c_reducepgn1[3] file average_force_equilibration_nvt_pgn1.txt mode scalar off 1
fix             avetimepgn2 pgn2 ave/time 1 ${dumping_interval_timesteps} ${dumping_interval_timesteps} v_time c_reducepgn2[1] c_reducepgn2[2] c_reducepgn2[3] file average_force_equilibration_nvt_pgn2.txt mode scalar off 1
# Calculation and printing of time block averages of the components of the forces acting on the centers of mass of the polymer-grafted nanoparticles through time.

dump            customallequilibrationnvt all custom ${dumping_interval_timesteps} PGNs_implicit_solvent_fixed_distance_equilibration_nvt.lammpstrj id mol type xs ys zs ix iy iz
# Printing of trajectory file frames in frequency to match that of PGNs_implicit_solvent_fixed_distance_soft_pushoff.lmp.
restart         ${end_timesteps_equilibration_nvt} PGNs_implicit_solvent_fixed_distance_equilibration_nvt.restart
# Printing of restart files.
run             ${end_timesteps_equilibration_nvt}
