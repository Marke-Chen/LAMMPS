#!/usr/bin/python
# -*- coding: utf-8 -*-

# %% Overview
# This Python 3 script generates a data file with the radial mean-squared
# internal distances and a data file with the average radial mean-squared
# internal distances of the grafted chains in a frame file with unscaled and
# unwrapped coordinates generated by
# frame_file_coordinates_unscaling_unwrapping.py.

# %% Modification History
# This script has been edited by:
# * Felipe Fabricio Pacci Evaristo (12/31/2023)

# %% Library Imports
from sys import argv, exit
from math import sqrt
from numpy import longdouble, array, mean


# %% Functions
# Retrieval of the Arguments used with this Script
def get_command_arguments(arguments):
    if len(arguments) != 4:
        print("Unexpected number or arguments.\n"
              "Usage: %s "
              "<unscaled_unwrapped_coordinates_frame_file> "
              "<mean_squared_internal_distances_radial_data_file> "
              "<average_mean_squared_internal_distances_radial_data_file>"
              % argv[0])
        exit(1)
    return arguments


def main():
    arguments = get_command_arguments(argv)
    unscaled_unwrapped_coordinates_frame_file = arguments[1]
    mean_squared_internal_distances_radial_data_file = arguments[2]
    average_mean_squared_internal_distances_radial_data_file = arguments[3]
    frame = Frame()
    frame.read_unscaled_unwrapped_coordinates_frame_file(
        unscaled_unwrapped_coordinates_frame_file)
    frame.calculate_mean_squared_internal_distances_radial()
    frame.calculate_average_mean_squared_internal_distances_radial()
    frame.write_mean_squared_internal_distances_radial_data_file(
        mean_squared_internal_distances_radial_data_file)
    frame.write_average_mean_squared_internal_distances_radial_data_file(
        average_mean_squared_internal_distances_radial_data_file)


# %% Classes
class Atom:
    def __init__(self, id_, mol, type_, xu, yu, zu):
        self.id = id_
        self.mol = mol
        self.type = type_
        self.xu = xu
        self.yu = yu
        self.zu = zu


class Bond:
    def __init__(self, id_, type_, a, b):
        self.id = id_
        self.type = type_
        self.a = a
        self.b = b


class Molecule:
    def __init__(self, mol, dru2):
        self.mol = mol
        self.dru2 = dru2


class Frame:
    def __init__(self):
        self.timestep = None
        self.numberAtoms = None
        self.numberBonds = None
        self.numberAtomTypes = None
        self.numberBondTypes = None
        self.xlo = None
        self.xhi = None
        self.ylo = None
        self.yhi = None
        self.zlo = None
        self.zhi = None
        self.masses = []
        self.atoms = []
        self.bonds = []
        self.molecules = []
        self.lengthGraftedChains = None
        self.averageMeanSquaredInternalDistancesRadial = []
        self.boxEdgeLength = []

    # Calculation of the Relevant Parameters that define the Simulation Box
    def calculate_box_parameters(self):
        self.boxEdgeLength.append(abs(self.xhi - self.xlo))
        self.boxEdgeLength.append(abs(self.yhi - self.ylo))
        self.boxEdgeLength.append(abs(self.zhi - self.zlo))

    # Import of the Frame File with Unscaled and Unwrapped Coordinates
    def read_unscaled_unwrapped_coordinates_frame_file(
            self, unscaled_unwrapped_coordinates_frame_file):
        try:
            file = open(unscaled_unwrapped_coordinates_frame_file, "r")
        except IOError:
            print("Unscaled unwrapped coordinates frame file %s "
                  "could not be opened."
                  % unscaled_unwrapped_coordinates_frame_file)
            exit(1)
        else:
            line = file.readline()
            while line:
                if "Timestep" in line:
                    self.timestep = int(line.strip().split()[-1])
                if "atoms" in line:
                    self.numberAtoms = int(line.strip().split()[0])
                if "bonds" in line:
                    self.numberBonds = int(line.strip().split()[0])
                if "atom types" in line:
                    self.numberAtomTypes = int(line.strip().split()[0])
                if "bond types" in line:
                    self.numberBondTypes = int(line.strip().split()[0])
                if "xlo xhi" in line:
                    self.xlo = float(line.strip().split()[0])
                    self.xhi = float(line.strip().split()[1])
                if "ylo yhi" in line:
                    self.ylo = float(line.strip().split()[0])
                    self.yhi = float(line.strip().split()[1])
                if "zlo zhi" in line:
                    self.zlo = float(line.strip().split()[0])
                    self.zhi = float(line.strip().split()[1])
                if "Masses" in line:
                    file.readline()
                    for index in range(self.numberAtomTypes):
                        subline = file.readline().strip().split()
                        self.masses.append(float(subline[1]))
                if "Atoms" in line:
                    file.readline()
                    for index in range(self.numberAtoms):
                        subline = file.readline().strip().split()
                        if len(subline) == 6:
                            self.atoms.append(Atom(
                                int(subline[0]),
                                int(subline[1]),
                                int(subline[2]),
                                float(subline[3]),
                                float(subline[4]),
                                float(subline[5])
                            )
                            )
                        else:
                            print("Unexpected number of entries "
                                  "in Atoms line %d."
                                  % (index + 1))
                            exit(2)
                if "Bonds" in line:
                    file.readline()
                    for index in range(self.numberBonds):
                        subline = file.readline().strip().split()
                        self.bonds.append(Bond(
                            int(subline[0]),
                            int(subline[1]),
                            int(subline[2]),
                            int(subline[3])
                        )
                        )
                line = file.readline()
            self.calculate_box_parameters()
        file.close()

    # Calculation of the Radial Mean-Squared Internal Distances of the Grafted
    # Chains in the Frame File with Unscaled and Unwrapped Coordinates
    def calculate_mean_squared_internal_distances_radial(self):
        index_final_atom = 1
        for index_atom in range(len(self.atoms)):
            initial_atom = self.atoms[index_atom]
            if initial_atom.type == 1:
                # The initial atom for the calculation of the radial
                # mean-squared internal distances of a grafted chain is always
                # set to be the grafted monomer.
                index_final_atom = 1
                final_atom = self.atoms[index_atom + index_final_atom]
                dru2 = []
                while final_atom.mol == initial_atom.mol:
                    dxu = final_atom.xu - initial_atom.xu
                    dyu = final_atom.yu - initial_atom.yu
                    dzu = final_atom.zu - initial_atom.zu
                    dru = sqrt(dxu ** 2 + dyu ** 2 + dzu ** 2)
                    dru2.append(dru ** 2)
                    index_final_atom += 1
                    if index_atom + index_final_atom < len(self.atoms):
                        final_atom = self.atoms[index_atom + index_final_atom]
                    else:
                        break
                self.molecules.append(Molecule(initial_atom.mol, dru2))
        self.lengthGraftedChains = index_final_atom

    # Calculation of the Average Radial Mean-Squared Internal Distances for the
    # Grafted Chains in the Frame File with Unscaled and Unwrapped Coordinates
    def calculate_average_mean_squared_internal_distances_radial(self):
        dru2_list = []
        for molecule in self.molecules:
            dru2_list.append(molecule.dru2)
        dru2_array = array(dru2_list, dtype=longdouble)
        self.averageMeanSquaredInternalDistancesRadial = \
            mean(dru2_array, axis=0, dtype=longdouble)

    # Export of the Data File with the Radial Mean-Squared Internal Distances
    # of the Grafted Chains in the Frame File with Unscaled and Unwrapped
    # Coordinates
    def write_mean_squared_internal_distances_radial_data_file(
            self,
            mean_squared_internal_distances_radial_data_file):
        file = open(
            mean_squared_internal_distances_radial_data_file, "w")
        file.write("Radial Mean-Squared Internal Distances "
                   "at Timestep %d\n"
                   % self.timestep)
        file.write("\n")
        for index_final_atom in range(self.lengthGraftedChains - 1):
            file.write("%4i" % (index_final_atom + 1))
            for index_molecule in range(len(self.molecules)):
                file.write(
                    "% 12.6f"
                    % self.molecules[index_molecule].dru2[index_final_atom]
                )
            file.write("\n")
        file.close()

    # Export of the Data File with the Average Radial Mean-Squared Internal
    # Distances for the Grafted Chains in the Frame File with Unscaled and
    # Unwrapped Coordinates
    def write_average_mean_squared_internal_distances_radial_data_file(
            self,
            average_mean_squared_internal_distances_radial_data_file):
        file = open(
            average_mean_squared_internal_distances_radial_data_file, "w")
        file.write("Average Radial Mean-Squared Internal Distances "
                   "at Timestep %d\n"
                   % self.timestep)
        file.write("\n")
        for index_final_atom in range(self.lengthGraftedChains - 1):
            file.write("%4i" % (index_final_atom + 1))
            file.write(
                "% 12.6f"
                % self.averageMeanSquaredInternalDistancesRadial[
                    index_final_atom]
            )
            file.write("\n")
        file.close()


if __name__ == "__main__":
    main()
