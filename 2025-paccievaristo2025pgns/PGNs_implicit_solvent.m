close all
clearvars
clc

%% Overview
% This MATLAB script imports, post-processes, concatenates, plots, and
% exports all data of interest associated with the set of simulations
% defined by the simulation parameters specified in params.txt. Its input
% data is output by the Soft Pushoff jobs submitted through
% job_setup_PGNs_implicit_solvent_fixed_distance_soft_pushoff.sh
% and the NVT Equilibration jobs submitted through
% job_setup_PGNs_implicit_solvent_fixed_distance_equilibration_nvt.sh.
% This script requires that the simulation box be comprised of a single
% rectangular prismatic unit cell. This script also requires that the pair
% of monomer-grafted nanoparticles in the simulation box be continuously
% aligned along the x direction through the entirety of all runs. All
% values in this script are provided and generated in the LAMMPS LJ unit
% system. This script exports potential_of_mean_force_pgns.txt to be
% imported by PGNs_solvent_phase_equilibrium.c.

%% Specification of Simulation Parameters
[radius_nanoparticles,length_grafted_chains,...
    target_grafting_density,epsilon_attractive] = readvars('params.txt');
% Importing of simulation parameters specified in params.txt.
radius_monomers = .5;
% Radius of a monomer.
radius_mons = radius_monomers - radius_monomers;
% Colloid-potential radius of a monomer.
radius_nps = radius_nanoparticles - radius_monomers;
% Colloid-potential radius of a nanoparticle.
diameter_nps = 2 * radius_nps;
% Colloid-potential diameter of a nanoparticle.
cutoff_mon_mon_equilibration_nvt = 5 * radius_monomers;
% Cutoff associated with the monomer-monomer pair potential employed during
% the NVT Equilibration run.
cutoff_np_np_equilibration_nvt =...
    (radius_nps + radius_nps + 2 * cutoff_mon_mon_equilibration_nvt);
% Cutoff associated with the nanoparticle-nanoparticle pair potential
% employed during the NVT Equilibration run.
cutoff_mon_np_equilibration_nvt =...
    (cutoff_mon_mon_equilibration_nvt +...
    cutoff_np_np_equilibration_nvt) / 2;
% Cutoff associated with the monomer-nanoparticle pair potential employed
% during the NVT Equilibration run.
max_cutoff_equilibration_nvt =...
    max([cutoff_mon_mon_equilibration_nvt,...
    cutoff_np_np_equilibration_nvt,...
    cutoff_mon_np_equilibration_nvt],[],'all');
% Maximum cutoff associated with the pair potentials employed during the
% NVT Equilibration run.
max_cutoff_soft_pushoff = 2 ^ (1 / 6) + diameter_nps;
% Maximum cutoff associated with the pair potentials employed during the
% Soft Pushoff run.
max_cutoff =...
    max([max_cutoff_soft_pushoff,...
    max_cutoff_equilibration_nvt],[],'all');
% Overall maximum cutoff associated with the pair potentials employed
% during either the Soft Pushoff or the NVT Equilibration runs.
min_distance_grafted_monomers_nanoparticle = 2 * radius_monomers;
% Minimum possible distance between grafted monomers on the surface of the
% same nanoparticle.
max_distance_nanoparticles_cell =...
    2 * (radius_nanoparticles +...
    length_grafted_chains * 2 * radius_monomers +...
    max_cutoff / 2);
% Maximum possible distance between nanoparticles in a unit cell.
volume_cell = (2 * max_distance_nanoparticles_cell) ^ 3;
% Volume of a unit cell.
edge_length_x_cell = volume_cell ^ (1 / 3);
% Edge length along x direction of rectangular prismatic unit cell
% associated with the data to be post-processed (in σ).
number_molecules = 2 *...
    (1 + fix(target_grafting_density * 4 * pi * radius_nanoparticles ^ 2));
% Number of molecules associated with the data to be post-processed.
index_molecule_tag_np1 = 1;
% Index associated with the molecule tag of NP1.
index_molecule_tag_np2 = number_molecules / 2 + 1;
% Index associated with the molecule tag of NP2.
timestep = .005;
% Value of timestep associated with the data to be post-processed (in τ).
dumping_interval_dt = 1000;
% Interval between every two data dumps in timesteps.
number_timesteps_soft_pushoff = readvars('time.txt');
% Total number of timesteps for Soft Pushoff runs.
number_timesteps_equilibration_nvt =...
    6000000 + epsilon_attractive * 30000000;
% Total number of timesteps for NVT Equilibration runs.

[reference_radius_of_gyration_equilibrium,...
    standard_deviation_radius_of_gyration_equilibrium] =...
    readvars('reference_radius_of_gyration_equilibrium.txt',...
    'Delimiter','\t');
% Average and standard deviation of the radius of gyration at equilibrium
% for Ɛ = 0.000000 k_BT.

%% Specification of Post-Processing Parameters
distances_monomer_grafted_nanoparticles = importdata(...
    'distances_monomer_grafted_nanoparticles.txt','\n');
% Sampled distances between monomer-grafted nanoparticles listed in
% distances_monomer_grafted_nanoparticles.txt.
normalized_distances_monomer_grafted_nanoparticles =...
    distances_monomer_grafted_nanoparticles ./...
    (2 *...
    (radius_nanoparticles + reference_radius_of_gyration_equilibrium));
% Inclusion of the paths where the data files to be imported are located.
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    path = fullfile(pwd,...
        sprintf(...
        '%.6f',distances_monomer_grafted_nanoparticles(index_column)));
    addpath(path)
end

number_timesteps_block = 75000;
% Number of timesteps contained by each block of NVT Equilibration time
% series data to be averaged.
number_timesteps_equilibrium_block = 25 * number_timesteps_block;
% Number of timesteps contained by the end blocks of the NVT Equilibration
% time series datasets (associated with equilibrium).
number_values_hyperaverage_radii_of_gyration_equilibrium = 1;
% number_values_hyperaverage_radii_of_gyration_equilibrium =...
%     length(distances_monomer_grafted_nanoparticles);
% Number of values in hyperaverage_radii_of_gyration_equilibrium
% associated with the same number of longest sampled distances between
% monomer-grafted nanoparticles to be averaged to calculate
% reference_hyperaverage_radii_of_gyration_equilibrium.
cutoff_potential_of_mean_force_pgns = 500;
% Maximum significant value for the potential of mean force, in k_BT. The
% value of the potential of mean force is taken as infinity beyond such
% cutoff value. The default value for cutoff_potential_of_mean_force_pgns
% is 500. The output formats for the variables output to
% potential_of_mean_force_pgns.txt must be adjusted accordingly if the
% default value of cutoff_potential_of_mean_force_pgns is changed.
max_number_entries_column_legends_distances_mgs = 28;
% Maximum number of legend entries per column for legends of plots
% displaying time series datasets associated with different sampled
% distances between monomer-grafted nanoparticles.

sampling_intervals_distances_monomer_grafted_nanoparticles = diff(...
    distances_monomer_grafted_nanoparticles);
% Sampling intervals for sampled distances between monomer-grafted
% nanoparticles.
fprintf('Equilibration Threshold: ')
threshold_time_dt_equilibrium =...
    number_timesteps_equilibration_nvt -...
    number_timesteps_equilibrium_block;
fprintf('%G timesteps | ',threshold_time_dt_equilibrium)
% Value of visually determined threshold for equilibrium from onset of NVT
% Equilibration runs (in timesteps).
threshold_time_tau_equilibrium =...
    threshold_time_dt_equilibrium *...
    timestep;
fprintf('%G τ | ',threshold_time_tau_equilibrium)
% Value of visually determined threshold for equilibrium from onset of NVT
% Equilibration runs (in τ).
threshold_time_data_points_equilibrium =...
    threshold_time_dt_equilibrium /...
    dumping_interval_dt;
fprintf('%G data points\n',threshold_time_data_points_equilibrium)
% Value of visually determined threshold for equilibrium from onset of NVT
% Equilibration runs (in data points).
number_blocks_timesteps =...
    number_timesteps_equilibration_nvt /...
    number_timesteps_block;
% Number of blocks of timesteps within each NVT Equilibration time series
% dataset to be averaged to ease visualization of the NVT Equilibration
% time series data.
number_columns_legends_distances_mgs = ceil(...
    length(distances_monomer_grafted_nanoparticles)/...
    max_number_entries_column_legends_distances_mgs);
% Number of columns of legend entries for legends of plots displaying time
% series datasets associated with different sampled distances between
% monomer-grafted nanoparticles.

%% Soft Pushoff
% Counting of the number of data rows in each and all time-series data
% files produced by Soft Pushoff runs.
types_dataset =...
    ["position","average_radii_of_gyration","average_force"];
numbers_rows_soft_pushoff =...
    zeros(...
    length(types_dataset),3,2,length(distances_monomer_grafted_nanoparticles));
for index_types_dataset = 1:length(types_dataset)
    if strcmp(types_dataset(index_types_dataset),'position')
        types_particle = ["mgn","np","selgraftmon"];
    elseif strcmp(types_dataset(index_types_dataset),...
            'average_radii_of_gyration')
        types_particle = "";
    elseif strcmp(types_dataset(index_types_dataset),'average_force')
        types_particle = "pgn";
    end
    for index_types_particle = 1:length(types_particle)
        if strcmp(types_dataset(index_types_dataset),...
                'average_radii_of_gyration')
            for index_distances_monomer_grafted_nanoparticles =...
                    1:length(distances_monomer_grafted_nanoparticles)
                file_name = strcat(types_dataset(index_types_dataset),...
                    '_soft_pushoff_',...
                    types_particle(index_types_particle),...
                    sprintf('%7.6f',radius_nanoparticles),'_',...
                    sprintf('%i',length_grafted_chains),'_',...
                    sprintf('%7.6f',target_grafting_density),'_',...
                    sprintf('%7.6f',epsilon_attractive),'_',...
                    sprintf(...
                    '%.6f',distances_monomer_grafted_nanoparticles(...
                    index_distances_monomer_grafted_nanoparticles)),...
                    '.txt');
                file_identifier = fopen(file_name);
                numbers_rows_soft_pushoff(...
                    index_types_dataset,...
                    index_types_particle,...
                    index_distances_monomer_grafted_nanoparticles) = 0;
                while true
                    if ~ischar(fgetl(file_identifier))
                        break
                    end
                    numbers_rows_soft_pushoff(...
                        index_types_dataset,...
                        index_types_particle,...
                        index_distances_monomer_grafted_nanoparticles) =...
                        numbers_rows_soft_pushoff(...
                        index_types_dataset,...
                        index_types_particle,...
                        index_distances_monomer_grafted_nanoparticles) + 1;
                end
            end
        else
            for index_particle = 1:2
                for index_distances_monomer_grafted_nanoparticles =...
                        1:length(distances_monomer_grafted_nanoparticles)
                    file_name = strcat(types_dataset(index_types_dataset),...
                        '_soft_pushoff_',...
                        types_particle(index_types_particle),...
                        sprintf('%i',index_particle),'_',...
                        sprintf('%7.6f',radius_nanoparticles),'_',...
                        sprintf('%i',length_grafted_chains),'_',...
                        sprintf('%7.6f',target_grafting_density),'_',...
                        sprintf('%7.6f',epsilon_attractive),'_',...
                        sprintf(...
                        '%.6f',distances_monomer_grafted_nanoparticles(...
                        index_distances_monomer_grafted_nanoparticles)),...
                        '.txt');
                    file_identifier = fopen(file_name);
                    numbers_rows_soft_pushoff(...
                        index_types_dataset,...
                        index_types_particle,...
                        index_particle,...
                        index_distances_monomer_grafted_nanoparticles) = 0;
                    while true
                        if ~ischar(fgetl(file_identifier))
                            break
                        end
                        numbers_rows_soft_pushoff(...
                            index_types_dataset,...
                            index_types_particle,...
                            index_particle,...
                            index_distances_monomer_grafted_nanoparticles) =...
                            numbers_rows_soft_pushoff(...
                            index_types_dataset,...
                            index_types_particle,...
                            index_particle,...
                            index_distances_monomer_grafted_nanoparticles) + 1;
                    end
                end
            end
        end
    end
end
number_rows_soft_pushoff = mean(nonzeros(numbers_rows_soft_pushoff));
number_rows_soft_pushoff = number_rows_soft_pushoff - 2;
fclose(file_identifier);

% Importing of the position of the center of mass of MGN1 data produced by
% the Soft Pushoff runs.
positions_soft_pushoff_mgn1 = cell(1,1);
time_dt_position_soft_pushoff_mgn1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_soft_pushoff_mgn1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_soft_pushoff_mgn1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_soft_pushoff_mgn1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_soft_pushoff_mgn1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_soft_pushoff_mgn1_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_soft_pushoff_mgn1 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_soft_pushoff_mgn1;
    time_dt_position_soft_pushoff_mgn1(...
        :,index_column) = table.(1);
    time_tau_position_soft_pushoff_mgn1(...
        :,index_column) = table.(2);
    positions_x_soft_pushoff_mgn1(...
        :,index_column) = table.(3);
    positions_y_soft_pushoff_mgn1(...
        :,index_column) = table.(4);
    positions_z_soft_pushoff_mgn1(...
        :,index_column) = table.(5);
end
% Importing of the position of the center of mass of MGN2 data produced by
% the Soft Pushoff runs.
positions_soft_pushoff_mgn2 = cell(1,1);
time_dt_position_soft_pushoff_mgn2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_soft_pushoff_mgn2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_soft_pushoff_mgn2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_soft_pushoff_mgn2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_soft_pushoff_mgn2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_soft_pushoff_mgn2_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_soft_pushoff_mgn2 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_soft_pushoff_mgn2;
    time_dt_position_soft_pushoff_mgn2(...
        :,index_column) = table.(1);
    time_tau_position_soft_pushoff_mgn2(...
        :,index_column) = table.(2);
    positions_x_soft_pushoff_mgn2(...
        :,index_column) = table.(3);
    positions_y_soft_pushoff_mgn2(...
        :,index_column) = table.(4);
    positions_z_soft_pushoff_mgn2(...
        :,index_column) = table.(5);
end
% Generation of the distance between the centers of mass of MGN1
% and MGN2 data from the data produced by the Soft Pushoff runs.
time_dt_position_soft_pushoff_mgns =...
    zeros(number_rows_soft_pushoff,1);
time_tau_position_soft_pushoff_mgns =...
    zeros(number_rows_soft_pushoff,1);
for index_row = 1:number_rows_soft_pushoff
    time_dt_position_soft_pushoff_mgns(index_row,1) =...
        mean(...
        [time_dt_position_soft_pushoff_mgn1(...
        index_row,:)...
        time_dt_position_soft_pushoff_mgn2(...
        index_row,:)]);
    time_tau_position_soft_pushoff_mgns(index_row,1) =...
        mean(...
        [time_tau_position_soft_pushoff_mgn1(...
        index_row,:)...
        time_tau_position_soft_pushoff_mgn2(...
        index_row,:)]);
end
distances_soft_pushoff_mgns =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    for index_row = 1:number_rows_soft_pushoff
        distances_soft_pushoff_mgns(index_row,index_column) =...
            sqrt(...
            (positions_x_soft_pushoff_mgn2(index_row,...
            index_column) -...
            positions_x_soft_pushoff_mgn1(index_row,...
            index_column)).^2 +...
            (positions_y_soft_pushoff_mgn2(index_row,...
            index_column) -...
            positions_y_soft_pushoff_mgn1(index_row,...
            index_column)).^2 +...
            (positions_z_soft_pushoff_mgn2(index_row,...
            index_column) -...
            positions_z_soft_pushoff_mgn1(index_row,...
            index_column)).^2);
        if distances_soft_pushoff_mgns(index_row,index_column) >...
                edge_length_x_cell / 2
            distances_soft_pushoff_mgns(...
                index_row,index_column) =...
                abs(...
                distances_soft_pushoff_mgns(...
                index_row,index_column) -...
                edge_length_x_cell);
        end
    end
end

% Importing of the position of the center of NP1 data produced by the Soft
% Pushoff runs.
positions_soft_pushoff_np1 = cell(1,1);
time_dt_position_soft_pushoff_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_soft_pushoff_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_soft_pushoff_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_soft_pushoff_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_soft_pushoff_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_soft_pushoff_np1_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_soft_pushoff_np1 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_soft_pushoff_np1;
    time_dt_position_soft_pushoff_np1(...
        :,index_column) = table.(1);
    time_tau_position_soft_pushoff_np1(...
        :,index_column) = table.(2);
    positions_x_soft_pushoff_np1(...
        :,index_column) = table.(3);
    positions_y_soft_pushoff_np1(...
        :,index_column) = table.(4);
    positions_z_soft_pushoff_np1(...
        :,index_column) = table.(5);
end
% Importing of the position of the center of SelectedGraftedMonomer1 data
% produced by the Soft Pushoff runs.
positions_soft_pushoff_selgraftmon1 = cell(1,1);
time_dt_position_soft_pushoff_selgraftmon1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_soft_pushoff_selgraftmon1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_soft_pushoff_selgraftmon1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_soft_pushoff_selgraftmon1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_soft_pushoff_selgraftmon1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_soft_pushoff_selgraftmon1_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_soft_pushoff_selgraftmon1 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_soft_pushoff_selgraftmon1;
    time_dt_position_soft_pushoff_selgraftmon1(...
        :,index_column) = table.(1);
    time_tau_position_soft_pushoff_selgraftmon1(...
        :,index_column) = table.(2);
    positions_x_soft_pushoff_selgraftmon1(...
        :,index_column) = table.(3);
    positions_y_soft_pushoff_selgraftmon1(...
        :,index_column) = table.(4);
    positions_z_soft_pushoff_selgraftmon1(...
        :,index_column) = table.(5);
end
% Generation of the position of SelectedGraftedMonomer1 with respect to NP1
% data from the data produced by the Soft Pushoff runs.
time_dt_position_soft_pushoff_selgraftmon1_np1 =...
    zeros(number_rows_soft_pushoff,1);
time_tau_position_soft_pushoff_selgraftmon1_np1 =...
    zeros(number_rows_soft_pushoff,1);
for index_row = 1:number_rows_soft_pushoff
    time_dt_position_soft_pushoff_selgraftmon1_np1(...
        index_row,1) =...
        mean(...
        [time_dt_position_soft_pushoff_np1(...
        index_row,:)...
        time_dt_position_soft_pushoff_selgraftmon1(...
        index_row,:)]);
    time_tau_position_soft_pushoff_selgraftmon1_np1(index_row,1) =...
        mean(...
        [time_tau_position_soft_pushoff_np1(...
        index_row,:)...
        time_tau_position_soft_pushoff_selgraftmon1(...
        index_row,:)]);
end
positions_x_soft_pushoff_selgraftmon1_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_soft_pushoff_selgraftmon1_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_soft_pushoff_selgraftmon1_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_phi_soft_pushoff_selgraftmon1_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_theta_soft_pushoff_selgraftmon1_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_r_soft_pushoff_selgraftmon1_np1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    for index_row = 1:number_rows_soft_pushoff
        positions_x_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column) =...
            positions_x_soft_pushoff_selgraftmon1(...
            index_row,index_column) -...
            positions_x_soft_pushoff_np1(...
            index_row,index_column);
        if abs(positions_x_soft_pushoff_selgraftmon1_np1(...
                index_row,index_column)) > edge_length_x_cell / 2
            if positions_x_soft_pushoff_selgraftmon1_np1(...
                    index_row,index_column) < 0
                positions_x_soft_pushoff_selgraftmon1_np1(...
                    index_row,index_column) =...
                    positions_x_soft_pushoff_selgraftmon1_np1(...
                    index_row,index_column) + edge_length_x_cell;
            else
                positions_x_soft_pushoff_selgraftmon1_np1(...
                    index_row,index_column) =...
                    positions_x_soft_pushoff_selgraftmon1_np1(...
                    index_row,index_column) - edge_length_x_cell;
            end
        end
        positions_y_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column) =...
            positions_y_soft_pushoff_selgraftmon1(...
            index_row,index_column) -...
            positions_y_soft_pushoff_np1(...
            index_row,index_column);
        positions_z_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column) =...
            positions_z_soft_pushoff_selgraftmon1(...
            index_row,index_column) -...
            positions_z_soft_pushoff_np1(...
            index_row,index_column);
        [positions_phi_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column),...
            positions_theta_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column),...
            positions_r_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column)] = cart2sph(...
            positions_x_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column),...
            positions_y_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column),...
            positions_z_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column));
        positions_theta_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column) = rad2deg(...
            positions_theta_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column));
        positions_phi_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column) = rad2deg(...
            positions_phi_soft_pushoff_selgraftmon1_np1(...
            index_row,index_column));
    end
end
% Importing of the position of the center of NP2 data produced by the Soft
% Pushoff runs.
positions_soft_pushoff_np2 = cell(1,1);
time_dt_position_soft_pushoff_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_soft_pushoff_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_soft_pushoff_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_soft_pushoff_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_soft_pushoff_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_soft_pushoff_np2_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_soft_pushoff_np2 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_soft_pushoff_np2;
    time_dt_position_soft_pushoff_np2(...
        :,index_column) = table.(1);
    time_tau_position_soft_pushoff_np2(...
        :,index_column) = table.(2);
    positions_x_soft_pushoff_np2(...
        :,index_column) = table.(3);
    positions_y_soft_pushoff_np2(...
        :,index_column) = table.(4);
    positions_z_soft_pushoff_np2(...
        :,index_column) = table.(5);
end
% Importing of the position of the center of SelectedGraftedMonomer2 data
% produced by the Soft Pushoff runs.
positions_soft_pushoff_selgraftmon2 = cell(1,1);
time_dt_position_soft_pushoff_selgraftmon2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_soft_pushoff_selgraftmon2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_soft_pushoff_selgraftmon2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_soft_pushoff_selgraftmon2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_soft_pushoff_selgraftmon2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_soft_pushoff_selgraftmon2_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_soft_pushoff_selgraftmon2 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_soft_pushoff_selgraftmon2;
    time_dt_position_soft_pushoff_selgraftmon2(...
        :,index_column) = table.(1);
    time_tau_position_soft_pushoff_selgraftmon2(...
        :,index_column) = table.(2);
    positions_x_soft_pushoff_selgraftmon2(...
        :,index_column) = table.(3);
    positions_y_soft_pushoff_selgraftmon2(...
        :,index_column) = table.(4);
    positions_z_soft_pushoff_selgraftmon2(...
        :,index_column) = table.(5);
end
% Generation of the position of SelectedGraftedMonomer2 with respect to NP2
% data from the data produced by the Soft Pushoff runs.
time_dt_position_soft_pushoff_selgraftmon2_np2 =...
    zeros(number_rows_soft_pushoff,1);
time_tau_position_soft_pushoff_selgraftmon2_np2 =...
    zeros(number_rows_soft_pushoff,1);
for index_row = 1:number_rows_soft_pushoff
    time_dt_position_soft_pushoff_selgraftmon2_np2(...
        index_row,1) =...
        mean(...
        [time_dt_position_soft_pushoff_np2(...
        index_row,:)...
        time_dt_position_soft_pushoff_selgraftmon2(...
        index_row,:)]);
    time_tau_position_soft_pushoff_selgraftmon2_np2(index_row,1) =...
        mean(...
        [time_tau_position_soft_pushoff_np2(...
        index_row,:)...
        time_tau_position_soft_pushoff_selgraftmon2(...
        index_row,:)]);
end
positions_x_soft_pushoff_selgraftmon2_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_soft_pushoff_selgraftmon2_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_soft_pushoff_selgraftmon2_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_phi_soft_pushoff_selgraftmon2_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_theta_soft_pushoff_selgraftmon2_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
positions_r_soft_pushoff_selgraftmon2_np2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    for index_row = 1:number_rows_soft_pushoff
        positions_x_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column) =...
            positions_x_soft_pushoff_selgraftmon2(...
            index_row,index_column) -...
            positions_x_soft_pushoff_np2(...
            index_row,index_column);
        if abs(positions_x_soft_pushoff_selgraftmon2_np2(...
                index_row,index_column)) > edge_length_x_cell / 2
            if positions_x_soft_pushoff_selgraftmon2_np2(...
                    index_row,index_column) < 0
                positions_x_soft_pushoff_selgraftmon2_np2(...
                    index_row,index_column) =...
                    positions_x_soft_pushoff_selgraftmon2_np2(...
                    index_row,index_column) + edge_length_x_cell;
            else
                positions_x_soft_pushoff_selgraftmon2_np2(...
                    index_row,index_column) =...
                    positions_x_soft_pushoff_selgraftmon2_np2(...
                    index_row,index_column) - edge_length_x_cell;
            end
        end
        positions_y_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column) =...
            positions_y_soft_pushoff_selgraftmon2(...
            index_row,index_column) -...
            positions_y_soft_pushoff_np2(...
            index_row,index_column);
        positions_z_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column) =...
            positions_z_soft_pushoff_selgraftmon2(...
            index_row,index_column) -...
            positions_z_soft_pushoff_np2(...
            index_row,index_column);
        [positions_phi_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column),...
            positions_theta_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column),...
            positions_r_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column)] = cart2sph(...
            positions_x_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column),...
            positions_y_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column),...
            positions_z_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column));
        positions_theta_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column) = rad2deg(...
            positions_theta_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column));
        positions_phi_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column) = rad2deg(...
            positions_phi_soft_pushoff_selgraftmon2_np2(...
            index_row,index_column));
    end
end

% Importing of the time average of the radii of gyration data produced by
% the Soft Pushoff runs.
average_radii_of_gyration_distance_mgns_soft_pushoff = cell(1,1);
time_dt_average_radii_of_gyration_soft_pushoff =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_average_radii_of_gyration_soft_pushoff =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
average_radii_of_gyration_soft_pushoff =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles),...
    number_molecules);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('average_radii_of_gyration_soft_pushoff_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    average_radii_of_gyration_distance_mgns_soft_pushoff =...
        readtable(file_name,'NumHeaderLines',2,'ReadVariableNames',false);
    table = average_radii_of_gyration_distance_mgns_soft_pushoff;
    time_dt_average_radii_of_gyration_soft_pushoff(...
        :,index_column) = table.(1);
    time_tau_average_radii_of_gyration_soft_pushoff(...
        :,index_column) = timestep .* table.(1);
    for index_layer = 1:number_molecules
        average_radii_of_gyration_soft_pushoff(...
            :,index_column,index_layer) = table.(index_layer+1);
    end
end
% Averaging over grafted chains of the time average of the radii of
% gyration of the grafted chains data produced by the Soft Pushoff
% runs.
time_dt_hyperaverage_radii_of_gyration_soft_pushoff =...
    zeros(number_rows_soft_pushoff,1);
time_tau_hyperaverage_radii_of_gyration_soft_pushoff =...
    zeros(number_rows_soft_pushoff,1);
for index_row = 1:number_rows_soft_pushoff
    time_dt_hyperaverage_radii_of_gyration_soft_pushoff(...
        index_row,1) = mean(...
        time_dt_average_radii_of_gyration_soft_pushoff(...
        index_row,:));
    time_tau_hyperaverage_radii_of_gyration_soft_pushoff(...
        index_row,1) = mean(...
        time_tau_average_radii_of_gyration_soft_pushoff(...
        index_row,:));
end
hyperaverage_radii_of_gyration_soft_pushoff =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    for index_row = 1:number_rows_soft_pushoff
        hyperaverage_radii_of_gyration_soft_pushoff(...
            index_row,index_column) = mean(mean([...
            average_radii_of_gyration_soft_pushoff(...
            index_row,index_column,...
            index_molecule_tag_np1+1:index_molecule_tag_np2-1)...
            average_radii_of_gyration_soft_pushoff(...
            index_row,index_column,...
            index_molecule_tag_np2+1:end)]));
    end
end

% Importing of the average force on PGN1 data produced by the Soft
% Pushoff runs.
average_forces_soft_pushoff_pgn1 = cell(1,1);
time_dt_average_force_soft_pushoff_pgn1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_average_force_soft_pushoff_pgn1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_x_soft_pushoff_pgn1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_y_soft_pushoff_pgn1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_z_soft_pushoff_pgn1 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('average_force_soft_pushoff_pgn1_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    average_forces_soft_pushoff_pgn1 =...
        readtable(file_name,'ReadVariableNames',false);
    table = average_forces_soft_pushoff_pgn1;
    time_dt_average_force_soft_pushoff_pgn1(...
        :,index_column) = table.(1);
    time_tau_average_force_soft_pushoff_pgn1(...
        :,index_column) = table.(2);
    average_forces_x_soft_pushoff_pgn1(...
        :,index_column) = table.(3);
    average_forces_y_soft_pushoff_pgn1(...
        :,index_column) = table.(4);
    average_forces_z_soft_pushoff_pgn1(...
        :,index_column) = table.(5);
end
% Importing of the average force on PGN2 data produced by the Soft
% Pushoff runs.
average_forces_soft_pushoff_pgn2 = cell(1,1);
time_dt_average_force_soft_pushoff_pgn2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_average_force_soft_pushoff_pgn2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_x_soft_pushoff_pgn2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_y_soft_pushoff_pgn2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_z_soft_pushoff_pgn2 =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('average_force_soft_pushoff_pgn2_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    average_forces_soft_pushoff_pgn2 =...
        readtable(file_name,'ReadVariableNames',false);
    table = average_forces_soft_pushoff_pgn2;
    time_dt_average_force_soft_pushoff_pgn2(...
        :,index_column) = table.(1);
    time_tau_average_force_soft_pushoff_pgn2(...
        :,index_column) = table.(2);
    average_forces_x_soft_pushoff_pgn2(...
        :,index_column) = table.(3);
    average_forces_y_soft_pushoff_pgn2(...
        :,index_column) = table.(4);
    average_forces_z_soft_pushoff_pgn2(...
        :,index_column) = table.(5);
end
% Averaging of the average force on PGN1 and the average force on PGN2 data
% produced by the Soft Pushoff runs.
time_dt_average_force_soft_pushoff_pgns =...
    zeros(number_rows_soft_pushoff,1);
time_tau_average_force_soft_pushoff_pgns =...
    zeros(number_rows_soft_pushoff,1);
for index_row = 1:number_rows_soft_pushoff
    time_dt_average_force_soft_pushoff_pgns(index_row,1) =...
        mean(...
        [time_dt_average_force_soft_pushoff_pgn1(...
        index_row,:)...
        time_dt_average_force_soft_pushoff_pgn2(...
        index_row,:)]);
    time_tau_average_force_soft_pushoff_pgns(index_row,1) =...
        mean(...
        [time_tau_average_force_soft_pushoff_pgn1(...
        index_row,:)...
        time_tau_average_force_soft_pushoff_pgn2(...
        index_row,:)]);
end
average_forces_x_soft_pushoff_pgns =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_y_soft_pushoff_pgns =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_z_soft_pushoff_pgns =...
    zeros(number_rows_soft_pushoff,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    for index_row = 1:number_rows_soft_pushoff
        average_forces_x_soft_pushoff_pgns(index_row,...
            index_column) = mean(...
            [- average_forces_x_soft_pushoff_pgn1(index_row,...
            index_column)...
            average_forces_x_soft_pushoff_pgn2(index_row,...
            index_column)]);
        average_forces_y_soft_pushoff_pgns(index_row,...
            index_column) = mean(...
            [- average_forces_y_soft_pushoff_pgn1(index_row,...
            index_column)...
            average_forces_y_soft_pushoff_pgn2(index_row,...
            index_column)]);
        average_forces_z_soft_pushoff_pgns(index_row,...
            index_column) = mean(...
            [- average_forces_z_soft_pushoff_pgn1(index_row,...
            index_column)...
            average_forces_z_soft_pushoff_pgn2(index_row,...
            index_column)]);
    end
end

%% NVT Equilibration
% Counting of the number of data rows in each and all time-series data
% files produced by NVT Equilibration runs.
types_dataset =...
    ["position","average_radii_of_gyration","average_force"];
numbers_rows_equilibration_nvt =...
    zeros(...
    length(types_dataset),3,2,length(distances_monomer_grafted_nanoparticles));
for index_types_dataset = 1:length(types_dataset)
    if strcmp(types_dataset(index_types_dataset),'position')
        types_particle = ["mgn","np","selgraftmon"];
    elseif strcmp(types_dataset(index_types_dataset),...
            'average_radii_of_gyration')
        types_particle = "";
    elseif strcmp(types_dataset(index_types_dataset),'average_force')
        types_particle = "pgn";
    end
    for index_types_particle = 1:length(types_particle)
        if strcmp(types_dataset(index_types_dataset),...
                'average_radii_of_gyration')
            for index_distances_monomer_grafted_nanoparticles =...
                    1:length(distances_monomer_grafted_nanoparticles)
                file_name = strcat(types_dataset(index_types_dataset),...
                    '_equilibration_nvt_',...
                    types_particle(index_types_particle),...
                    sprintf('%7.6f',radius_nanoparticles),'_',...
                    sprintf('%i',length_grafted_chains),'_',...
                    sprintf('%7.6f',target_grafting_density),'_',...
                    sprintf('%7.6f',epsilon_attractive),'_',...
                    sprintf(...
                    '%.6f',distances_monomer_grafted_nanoparticles(...
                    index_distances_monomer_grafted_nanoparticles)),...
                    '.txt');
                file_identifier = fopen(file_name);
                numbers_rows_equilibration_nvt(...
                    index_types_dataset,...
                    index_types_particle,...
                    index_distances_monomer_grafted_nanoparticles) = 0;
                while true
                    if ~ischar(fgetl(file_identifier))
                        break
                    end
                    numbers_rows_equilibration_nvt(...
                        index_types_dataset,...
                        index_types_particle,...
                        index_distances_monomer_grafted_nanoparticles) =...
                        numbers_rows_equilibration_nvt(...
                        index_types_dataset,...
                        index_types_particle,...
                        index_distances_monomer_grafted_nanoparticles) + 1;
                end
            end
        else
            for index_particle = 1:2
                for index_distances_monomer_grafted_nanoparticles =...
                        1:length(distances_monomer_grafted_nanoparticles)
                    file_name = strcat(types_dataset(index_types_dataset),...
                        '_equilibration_nvt_',...
                        types_particle(index_types_particle),...
                        sprintf('%i',index_particle),'_',...
                        sprintf('%7.6f',radius_nanoparticles),'_',...
                        sprintf('%i',length_grafted_chains),'_',...
                        sprintf('%7.6f',target_grafting_density),'_',...
                        sprintf('%7.6f',epsilon_attractive),'_',...
                        sprintf(...
                        '%.6f',distances_monomer_grafted_nanoparticles(...
                        index_distances_monomer_grafted_nanoparticles)),...
                        '.txt');
                    file_identifier = fopen(file_name);
                    numbers_rows_equilibration_nvt(...
                        index_types_dataset,...
                        index_types_particle,...
                        index_particle,...
                        index_distances_monomer_grafted_nanoparticles) = 0;
                    while true
                        if ~ischar(fgetl(file_identifier))
                            break
                        end
                        numbers_rows_equilibration_nvt(...
                            index_types_dataset,...
                            index_types_particle,...
                            index_particle,...
                            index_distances_monomer_grafted_nanoparticles) =...
                            numbers_rows_equilibration_nvt(...
                            index_types_dataset,...
                            index_types_particle,...
                            index_particle,...
                            index_distances_monomer_grafted_nanoparticles) + 1;
                    end
                end
            end
        end
    end
end
number_rows_equilibration_nvt = mean(nonzeros(numbers_rows_equilibration_nvt));
number_rows_equilibration_nvt = number_rows_equilibration_nvt - 2;
fclose(file_identifier);

% Importing of the position of the center of mass of MGN1 data produced by
% the NVT Equilibration runs.
positions_equilibration_nvt_mgn1 = cell(1,1);
time_dt_position_equilibration_nvt_mgn1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_equilibration_nvt_mgn1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_equilibration_nvt_mgn1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_equilibration_nvt_mgn1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_equilibration_nvt_mgn1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_equilibration_nvt_mgn1_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_equilibration_nvt_mgn1 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_equilibration_nvt_mgn1;
    time_dt_position_equilibration_nvt_mgn1(...
        :,index_column) = table.(1);
    time_tau_position_equilibration_nvt_mgn1(...
        :,index_column) = table.(2);
    positions_x_equilibration_nvt_mgn1(...
        :,index_column) = table.(3);
    positions_y_equilibration_nvt_mgn1(...
        :,index_column) = table.(4);
    positions_z_equilibration_nvt_mgn1(...
        :,index_column) = table.(5);
end
% Importing of the position of the center of mass of MGN2 data produced by
% the NVT Equilibration runs.
positions_equilibration_nvt_mgn2 = cell(1,1);
time_dt_position_equilibration_nvt_mgn2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_equilibration_nvt_mgn2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_equilibration_nvt_mgn2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_equilibration_nvt_mgn2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_equilibration_nvt_mgn2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_equilibration_nvt_mgn2_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_equilibration_nvt_mgn2 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_equilibration_nvt_mgn2;
    time_dt_position_equilibration_nvt_mgn2(...
        :,index_column) = table.(1);
    time_tau_position_equilibration_nvt_mgn2(...
        :,index_column) = table.(2);
    positions_x_equilibration_nvt_mgn2(...
        :,index_column) = table.(3);
    positions_y_equilibration_nvt_mgn2(...
        :,index_column) = table.(4);
    positions_z_equilibration_nvt_mgn2(...
        :,index_column) = table.(5);
end
% Generation of the distance between the centers of mass of MGN1
% and MGN2 data from the data produced by the NVT Equilibration runs.
time_dt_position_equilibration_nvt_mgns =...
    zeros(number_rows_equilibration_nvt,1);
time_tau_position_equilibration_nvt_mgns =...
    zeros(number_rows_equilibration_nvt,1);
for index_row = 1:number_rows_equilibration_nvt
    time_dt_position_equilibration_nvt_mgns(index_row,1) =...
        mean(...
        [time_dt_position_equilibration_nvt_mgn1(...
        index_row,:)...
        time_dt_position_equilibration_nvt_mgn2(...
        index_row,:)]);
    time_tau_position_equilibration_nvt_mgns(index_row,1) =...
        mean(...
        [time_tau_position_equilibration_nvt_mgn1(...
        index_row,:)...
        time_tau_position_equilibration_nvt_mgn2(...
        index_row,:)]);
end
distances_equilibration_nvt_mgns =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    for index_row = 1:number_rows_equilibration_nvt
        distances_equilibration_nvt_mgns(index_row,index_column) =...
            sqrt(...
            (positions_x_equilibration_nvt_mgn2(index_row,...
            index_column) -...
            positions_x_equilibration_nvt_mgn1(index_row,...
            index_column)).^2 +...
            (positions_y_equilibration_nvt_mgn2(index_row,...
            index_column) -...
            positions_y_equilibration_nvt_mgn1(index_row,...
            index_column)).^2 +...
            (positions_z_equilibration_nvt_mgn2(index_row,...
            index_column) -...
            positions_z_equilibration_nvt_mgn1(index_row,...
            index_column)).^2);
        if distances_equilibration_nvt_mgns(index_row,index_column) >...
                edge_length_x_cell / 2
            distances_equilibration_nvt_mgns(...
                index_row,index_column) =...
                abs(...
                distances_equilibration_nvt_mgns(...
                index_row,index_column) -...
                edge_length_x_cell);
        end
    end
end

% Importing of the position of the center of NP1 data produced by the NVT
% Equilibration runs.
positions_equilibration_nvt_np1 = cell(1,1);
time_dt_position_equilibration_nvt_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_equilibration_nvt_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_equilibration_nvt_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_equilibration_nvt_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_equilibration_nvt_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_equilibration_nvt_np1_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_equilibration_nvt_np1 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_equilibration_nvt_np1;
    time_dt_position_equilibration_nvt_np1(...
        :,index_column) = table.(1);
    time_tau_position_equilibration_nvt_np1(...
        :,index_column) = table.(2);
    positions_x_equilibration_nvt_np1(...
        :,index_column) = table.(3);
    positions_y_equilibration_nvt_np1(...
        :,index_column) = table.(4);
    positions_z_equilibration_nvt_np1(...
        :,index_column) = table.(5);
end
% Importing of the position of the center of SelectedGraftedMonomer1 data
% produced by the NVT Equilibration runs.
positions_equilibration_nvt_selgraftmon1 = cell(1,1);
time_dt_position_equilibration_nvt_selgraftmon1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_equilibration_nvt_selgraftmon1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_equilibration_nvt_selgraftmon1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_equilibration_nvt_selgraftmon1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_equilibration_nvt_selgraftmon1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_equilibration_nvt_selgraftmon1_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_equilibration_nvt_selgraftmon1 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_equilibration_nvt_selgraftmon1;
    time_dt_position_equilibration_nvt_selgraftmon1(...
        :,index_column) = table.(1);
    time_tau_position_equilibration_nvt_selgraftmon1(...
        :,index_column) = table.(2);
    positions_x_equilibration_nvt_selgraftmon1(...
        :,index_column) = table.(3);
    positions_y_equilibration_nvt_selgraftmon1(...
        :,index_column) = table.(4);
    positions_z_equilibration_nvt_selgraftmon1(...
        :,index_column) = table.(5);
end
% Generation of the position of SelectedGraftedMonomer1 with respect to NP1
% data from the data produced by the NVT Equilibration runs.
time_dt_position_equilibration_nvt_selgraftmon1_np1 =...
    zeros(number_rows_equilibration_nvt,1);
time_tau_position_equilibration_nvt_selgraftmon1_np1 =...
    zeros(number_rows_equilibration_nvt,1);
for index_row = 1:number_rows_equilibration_nvt
    time_dt_position_equilibration_nvt_selgraftmon1_np1(...
        index_row,1) =...
        mean(...
        [time_dt_position_equilibration_nvt_np1(...
        index_row,:)...
        time_dt_position_equilibration_nvt_selgraftmon1(...
        index_row,:)]);
    time_tau_position_equilibration_nvt_selgraftmon1_np1(index_row,1) =...
        mean(...
        [time_tau_position_equilibration_nvt_np1(...
        index_row,:)...
        time_tau_position_equilibration_nvt_selgraftmon1(...
        index_row,:)]);
end
positions_x_equilibration_nvt_selgraftmon1_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_equilibration_nvt_selgraftmon1_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_equilibration_nvt_selgraftmon1_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_phi_equilibration_nvt_selgraftmon1_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_theta_equilibration_nvt_selgraftmon1_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_r_equilibration_nvt_selgraftmon1_np1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    for index_row = 1:number_rows_equilibration_nvt
        positions_x_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column) =...
            positions_x_equilibration_nvt_selgraftmon1(...
            index_row,index_column) -...
            positions_x_equilibration_nvt_np1(...
            index_row,index_column);
        if abs(positions_x_equilibration_nvt_selgraftmon1_np1(...
                index_row,index_column)) > edge_length_x_cell / 2
            if positions_x_equilibration_nvt_selgraftmon1_np1(...
                    index_row,index_column) < 0
                positions_x_equilibration_nvt_selgraftmon1_np1(...
                    index_row,index_column) =...
                    positions_x_equilibration_nvt_selgraftmon1_np1(...
                    index_row,index_column) + edge_length_x_cell;
            else
                positions_x_equilibration_nvt_selgraftmon1_np1(...
                    index_row,index_column) =...
                    positions_x_equilibration_nvt_selgraftmon1_np1(...
                    index_row,index_column) - edge_length_x_cell;
            end
        end
        positions_y_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column) =...
            positions_y_equilibration_nvt_selgraftmon1(...
            index_row,index_column) -...
            positions_y_equilibration_nvt_np1(...
            index_row,index_column);
        positions_z_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column) =...
            positions_z_equilibration_nvt_selgraftmon1(...
            index_row,index_column) -...
            positions_z_equilibration_nvt_np1(...
            index_row,index_column);
        [positions_phi_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column),...
            positions_theta_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column),...
            positions_r_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column)] = cart2sph(...
            positions_x_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column),...
            positions_y_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column),...
            positions_z_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column));
        positions_theta_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column) = rad2deg(...
            positions_theta_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column));
        positions_phi_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column) = rad2deg(...
            positions_phi_equilibration_nvt_selgraftmon1_np1(...
            index_row,index_column));
    end
end
% Importing of the position of the center of NP2 data produced by the NVT
% Equilibration runs.
positions_equilibration_nvt_np2 = cell(1,1);
time_dt_position_equilibration_nvt_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_equilibration_nvt_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_equilibration_nvt_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_equilibration_nvt_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_equilibration_nvt_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_equilibration_nvt_np2_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_equilibration_nvt_np2 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_equilibration_nvt_np2;
    time_dt_position_equilibration_nvt_np2(...
        :,index_column) = table.(1);
    time_tau_position_equilibration_nvt_np2(...
        :,index_column) = table.(2);
    positions_x_equilibration_nvt_np2(...
        :,index_column) = table.(3);
    positions_y_equilibration_nvt_np2(...
        :,index_column) = table.(4);
    positions_z_equilibration_nvt_np2(...
        :,index_column) = table.(5);
end
% Importing of the position of the center of SelectedGraftedMonomer2 data
% produced by the NVT Equilibration runs.
positions_equilibration_nvt_selgraftmon2 = cell(1,1);
time_dt_position_equilibration_nvt_selgraftmon2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_position_equilibration_nvt_selgraftmon2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_x_equilibration_nvt_selgraftmon2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_equilibration_nvt_selgraftmon2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_equilibration_nvt_selgraftmon2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('position_equilibration_nvt_selgraftmon2_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    positions_equilibration_nvt_selgraftmon2 =...
        readtable(file_name,'ReadVariableNames',false);
    table = positions_equilibration_nvt_selgraftmon2;
    time_dt_position_equilibration_nvt_selgraftmon2(...
        :,index_column) = table.(1);
    time_tau_position_equilibration_nvt_selgraftmon2(...
        :,index_column) = table.(2);
    positions_x_equilibration_nvt_selgraftmon2(...
        :,index_column) = table.(3);
    positions_y_equilibration_nvt_selgraftmon2(...
        :,index_column) = table.(4);
    positions_z_equilibration_nvt_selgraftmon2(...
        :,index_column) = table.(5);
end
% Generation of the position of SelectedGraftedMonomer2 with respect to NP2
% data from the data produced by the NVT Equilibration runs.
time_dt_position_equilibration_nvt_selgraftmon2_np2 =...
    zeros(number_rows_equilibration_nvt,1);
time_tau_position_equilibration_nvt_selgraftmon2_np2 =...
    zeros(number_rows_equilibration_nvt,1);
for index_row = 1:number_rows_equilibration_nvt
    time_dt_position_equilibration_nvt_selgraftmon2_np2(...
        index_row,1) =...
        mean(...
        [time_dt_position_equilibration_nvt_np2(...
        index_row,:)...
        time_dt_position_equilibration_nvt_selgraftmon2(...
        index_row,:)]);
    time_tau_position_equilibration_nvt_selgraftmon2_np2(index_row,1) =...
        mean(...
        [time_tau_position_equilibration_nvt_np2(...
        index_row,:)...
        time_tau_position_equilibration_nvt_selgraftmon2(...
        index_row,:)]);
end
positions_x_equilibration_nvt_selgraftmon2_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_y_equilibration_nvt_selgraftmon2_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_z_equilibration_nvt_selgraftmon2_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_phi_equilibration_nvt_selgraftmon2_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_theta_equilibration_nvt_selgraftmon2_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
positions_r_equilibration_nvt_selgraftmon2_np2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    for index_row = 1:number_rows_equilibration_nvt
        positions_x_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column) =...
            positions_x_equilibration_nvt_selgraftmon2(...
            index_row,index_column) -...
            positions_x_equilibration_nvt_np2(...
            index_row,index_column);
        if abs(positions_x_equilibration_nvt_selgraftmon2_np2(...
                index_row,index_column)) > edge_length_x_cell / 2
            if positions_x_equilibration_nvt_selgraftmon2_np2(...
                    index_row,index_column) < 0
                positions_x_equilibration_nvt_selgraftmon2_np2(...
                    index_row,index_column) =...
                    positions_x_equilibration_nvt_selgraftmon2_np2(...
                    index_row,index_column) + edge_length_x_cell;
            else
                positions_x_equilibration_nvt_selgraftmon2_np2(...
                    index_row,index_column) =...
                    positions_x_equilibration_nvt_selgraftmon2_np2(...
                    index_row,index_column) - edge_length_x_cell;
            end
        end
        positions_y_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column) =...
            positions_y_equilibration_nvt_selgraftmon2(...
            index_row,index_column) -...
            positions_y_equilibration_nvt_np2(...
            index_row,index_column);
        positions_z_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column) =...
            positions_z_equilibration_nvt_selgraftmon2(...
            index_row,index_column) -...
            positions_z_equilibration_nvt_np2(...
            index_row,index_column);
        [positions_phi_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column),...
            positions_theta_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column),...
            positions_r_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column)] = cart2sph(...
            positions_x_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column),...
            positions_y_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column),...
            positions_z_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column));
        positions_theta_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column) = rad2deg(...
            positions_theta_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column));
        positions_phi_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column) = rad2deg(...
            positions_phi_equilibration_nvt_selgraftmon2_np2(...
            index_row,index_column));
    end
end

% Importing of the time average of the radii of gyration data produced by
% the NVT Equilibration runs.
average_radii_of_gyration_distance_mgns_equilibration_nvt = cell(1,1);
time_dt_average_radii_of_gyration_equilibration_nvt =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_average_radii_of_gyration_equilibration_nvt =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
average_radii_of_gyration_equilibration_nvt =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles),...
    number_molecules);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('average_radii_of_gyration_equilibration_nvt_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    average_radii_of_gyration_distance_mgns_equilibration_nvt =...
        readtable(file_name,'NumHeaderLines',2,'ReadVariableNames',false);
    table = average_radii_of_gyration_distance_mgns_equilibration_nvt;
    time_dt_average_radii_of_gyration_equilibration_nvt(...
        :,index_column) = table.(1);
    time_tau_average_radii_of_gyration_equilibration_nvt(...
        :,index_column) = timestep .* table.(1);
    for index_layer = 1:number_molecules
        average_radii_of_gyration_equilibration_nvt(...
            :,index_column,index_layer) = table.(index_layer+1);
    end
end
% Averaging over grafted chains of the time average of the radii of
% gyration of the grafted chains data produced by the NVT Equilibration
% runs.
time_dt_hyperaverage_radii_of_gyration_equilibration_nvt =...
    zeros(number_rows_equilibration_nvt,1);
time_tau_hyperaverage_radii_of_gyration_equilibration_nvt =...
    zeros(number_rows_equilibration_nvt,1);
for index_row = 1:number_rows_equilibration_nvt
    time_dt_hyperaverage_radii_of_gyration_equilibration_nvt(...
        index_row,1) = mean(...
        time_dt_average_radii_of_gyration_equilibration_nvt(...
        index_row,:));
    time_tau_hyperaverage_radii_of_gyration_equilibration_nvt(...
        index_row,1) = mean(...
        time_tau_average_radii_of_gyration_equilibration_nvt(...
        index_row,:));
end
hyperaverage_radii_of_gyration_equilibration_nvt =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    for index_row = 1:number_rows_equilibration_nvt
        hyperaverage_radii_of_gyration_equilibration_nvt(...
            index_row,index_column) = mean(mean([...
            average_radii_of_gyration_equilibration_nvt(...
            index_row,index_column,...
            index_molecule_tag_np1+1:index_molecule_tag_np2-1)...
            average_radii_of_gyration_equilibration_nvt(...
            index_row,index_column,...
            index_molecule_tag_np2+1:end)]));
    end
end

% Importing of the average force on PGN1 data produced by the NVT
% Equilibration runs.
average_forces_equilibration_nvt_pgn1 = cell(1,1);
time_dt_average_force_equilibration_nvt_pgn1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_average_force_equilibration_nvt_pgn1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_x_equilibration_nvt_pgn1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_y_equilibration_nvt_pgn1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_z_equilibration_nvt_pgn1 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('average_force_equilibration_nvt_pgn1_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    average_forces_equilibration_nvt_pgn1 =...
        readtable(file_name,'ReadVariableNames',false);
    table = average_forces_equilibration_nvt_pgn1;
    time_dt_average_force_equilibration_nvt_pgn1(...
        :,index_column) = table.(1);
    time_tau_average_force_equilibration_nvt_pgn1(...
        :,index_column) = table.(2);
    average_forces_x_equilibration_nvt_pgn1(...
        :,index_column) = table.(3);
    average_forces_y_equilibration_nvt_pgn1(...
        :,index_column) = table.(4);
    average_forces_z_equilibration_nvt_pgn1(...
        :,index_column) = table.(5);
end
% Importing of the average force on PGN2 data produced by the NVT
% Equilibration runs.
average_forces_equilibration_nvt_pgn2 = cell(1,1);
time_dt_average_force_equilibration_nvt_pgn2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
time_tau_average_force_equilibration_nvt_pgn2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_x_equilibration_nvt_pgn2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_y_equilibration_nvt_pgn2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_z_equilibration_nvt_pgn2 =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    file_name = strcat('average_force_equilibration_nvt_pgn2_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(index_column)),'.txt');
    average_forces_equilibration_nvt_pgn2 =...
        readtable(file_name,'ReadVariableNames',false);
    table = average_forces_equilibration_nvt_pgn2;
    time_dt_average_force_equilibration_nvt_pgn2(...
        :,index_column) = table.(1);
    time_tau_average_force_equilibration_nvt_pgn2(...
        :,index_column) = table.(2);
    average_forces_x_equilibration_nvt_pgn2(...
        :,index_column) = table.(3);
    average_forces_y_equilibration_nvt_pgn2(...
        :,index_column) = table.(4);
    average_forces_z_equilibration_nvt_pgn2(...
        :,index_column) = table.(5);
end
% Averaging of the average force on PGN1 and the average force on PGN2 data
% produced by the NVT Equilibration runs.
time_dt_average_force_equilibration_nvt_pgns =...
    zeros(number_rows_equilibration_nvt,1);
time_tau_average_force_equilibration_nvt_pgns =...
    zeros(number_rows_equilibration_nvt,1);
for index_row = 1:number_rows_equilibration_nvt
    time_dt_average_force_equilibration_nvt_pgns(index_row,1) =...
        mean(...
        [time_dt_average_force_equilibration_nvt_pgn1(...
        index_row,:)...
        time_dt_average_force_equilibration_nvt_pgn2(...
        index_row,:)]);
    time_tau_average_force_equilibration_nvt_pgns(index_row,1) =...
        mean(...
        [time_tau_average_force_equilibration_nvt_pgn1(...
        index_row,:)...
        time_tau_average_force_equilibration_nvt_pgn2(...
        index_row,:)]);
end
average_forces_x_equilibration_nvt_pgns =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_y_equilibration_nvt_pgns =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
average_forces_z_equilibration_nvt_pgns =...
    zeros(number_rows_equilibration_nvt,...
    length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    for index_row = 1:number_rows_equilibration_nvt
        average_forces_x_equilibration_nvt_pgns(index_row,...
            index_column) = mean(...
            [- average_forces_x_equilibration_nvt_pgn1(index_row,...
            index_column)...
            average_forces_x_equilibration_nvt_pgn2(index_row,...
            index_column)]);
        average_forces_y_equilibration_nvt_pgns(index_row,...
            index_column) = mean(...
            [- average_forces_y_equilibration_nvt_pgn1(index_row,...
            index_column)...
            average_forces_y_equilibration_nvt_pgn2(index_row,...
            index_column)]);
        average_forces_z_equilibration_nvt_pgns(index_row,...
            index_column) = mean(...
            [- average_forces_z_equilibration_nvt_pgn1(index_row,...
            index_column)...
            average_forces_z_equilibration_nvt_pgn2(index_row,...
            index_column)]);
    end
end

% Counting of the number of data rows in each and all pair potential data
% files produced by NVT Equilibration runs.
pair_interaction_types = ["1_1";"1_2";"1_3";"2_2";"2_3";"3_3"];
number_rows_pair_potential = zeros(length(pair_interaction_types),1);
for sub_index_row = 1:length(pair_interaction_types)
    file_name = strcat('pair_potential_',...
        pair_interaction_types(sub_index_row),'_',...
        sprintf('%7.6f',radius_nanoparticles),'_',...
        sprintf('%i',length_grafted_chains),'_',...
        sprintf('%7.6f',target_grafting_density),'_',...
        sprintf('%7.6f',epsilon_attractive),'_',...
        sprintf('%.6f',...
        distances_monomer_grafted_nanoparticles(1)),'.txt');
    file_identifier = fopen(file_name);
    number_rows_pair_potential(sub_index_row,1) = 0;
    while true
        if ~ischar(fgetl(file_identifier))
            break
        end
        number_rows_pair_potential(sub_index_row,1) =...
            number_rows_pair_potential(sub_index_row,1) + 1;
    end
    number_rows_pair_potential(sub_index_row,1) =...
        number_rows_pair_potential(sub_index_row,1) - 6;
    fclose(file_identifier);
end

% Importing of the pair potential data produced by NVT Equilibration runs.
pair_potentials = cell(1,1);
distances_pair_potential_1_1 =...
    zeros(number_rows_pair_potential(1,1),...
    length(distances_monomer_grafted_nanoparticles));
distances_pair_potential_1_2 =...
    zeros(number_rows_pair_potential(2,1),...
    length(distances_monomer_grafted_nanoparticles));
distances_pair_potential_1_3 =...
    zeros(number_rows_pair_potential(3,1),...
    length(distances_monomer_grafted_nanoparticles));
distances_pair_potential_2_2 =...
    zeros(number_rows_pair_potential(4,1),...
    length(distances_monomer_grafted_nanoparticles));
distances_pair_potential_2_3 =...
    zeros(number_rows_pair_potential(5,1),...
    length(distances_monomer_grafted_nanoparticles));
distances_pair_potential_3_3 =...
    zeros(number_rows_pair_potential(6,1),...
    length(distances_monomer_grafted_nanoparticles));
energies_pair_potential_1_1 =...
    zeros(number_rows_pair_potential(1,1),...
    length(distances_monomer_grafted_nanoparticles));
energies_pair_potential_1_2 =...
    zeros(number_rows_pair_potential(2,1),...
    length(distances_monomer_grafted_nanoparticles));
energies_pair_potential_1_3 =...
    zeros(number_rows_pair_potential(3,1),...
    length(distances_monomer_grafted_nanoparticles));
energies_pair_potential_2_2 =...
    zeros(number_rows_pair_potential(4,1),...
    length(distances_monomer_grafted_nanoparticles));
energies_pair_potential_2_3 =...
    zeros(number_rows_pair_potential(5,1),...
    length(distances_monomer_grafted_nanoparticles));
energies_pair_potential_3_3 =...
    zeros(number_rows_pair_potential(6,1),...
    length(distances_monomer_grafted_nanoparticles));
forces_pair_potential_1_1 =...
    zeros(number_rows_pair_potential(1,1),...
    length(distances_monomer_grafted_nanoparticles));
forces_pair_potential_1_2 =...
    zeros(number_rows_pair_potential(2,1),...
    length(distances_monomer_grafted_nanoparticles));
forces_pair_potential_1_3 =...
    zeros(number_rows_pair_potential(3,1),...
    length(distances_monomer_grafted_nanoparticles));
forces_pair_potential_2_2 =...
    zeros(number_rows_pair_potential(4,1),...
    length(distances_monomer_grafted_nanoparticles));
forces_pair_potential_2_3 =...
    zeros(number_rows_pair_potential(5,1),...
    length(distances_monomer_grafted_nanoparticles));
forces_pair_potential_3_3 =...
    zeros(number_rows_pair_potential(6,1),...
    length(distances_monomer_grafted_nanoparticles));
for sub_index_row = 1:length(pair_interaction_types)
    for index_column = 1:length(distances_monomer_grafted_nanoparticles)
        file_name = strcat('pair_potential_',...
            pair_interaction_types(sub_index_row),'_',...
            sprintf('%7.6f',radius_nanoparticles),'_',...
            sprintf('%i',length_grafted_chains),'_',...
            sprintf('%7.6f',target_grafting_density),'_',...
            sprintf('%7.6f',epsilon_attractive),'_',...
            sprintf('%.6f',...
            distances_monomer_grafted_nanoparticles(index_column)),'.txt');
        pair_potentials =...
            readtable(file_name,'ReadVariableNames',false);
        table = pair_potentials;
        table = table(2:end,:);
        if sub_index_row == 1
            distances_pair_potential_1_1(:,index_column) =...
                table.(2);
            energies_pair_potential_1_1(:,index_column) =...
                table.(3);
            forces_pair_potential_1_1(:,index_column) =...
                table.(4);
        end
        if sub_index_row == 2
            distances_pair_potential_1_2(:,index_column) =...
                table.(2);
            energies_pair_potential_1_2(:,index_column) =...
                table.(3);
            forces_pair_potential_1_2(:,index_column) =...
                table.(4);
        end
        if sub_index_row == 3
            distances_pair_potential_1_3(:,index_column) =...
                table.(2);
            energies_pair_potential_1_3(:,index_column) =...
                table.(3);
            forces_pair_potential_1_3(:,index_column) =...
                table.(4);
        end
        if sub_index_row == 4
            distances_pair_potential_2_2(:,index_column) =...
                table.(2);
            energies_pair_potential_2_2(:,index_column) =...
                table.(3);
            forces_pair_potential_2_2(:,index_column) =...
                table.(4);
        end
        if sub_index_row == 5
            distances_pair_potential_2_3(:,index_column) =...
                table.(2);
            energies_pair_potential_2_3(:,index_column) =...
                table.(3);
            forces_pair_potential_2_3(:,index_column) =...
                table.(4);
        end
        if sub_index_row == 6
            distances_pair_potential_3_3(:,index_column) =...
                table.(2);
            energies_pair_potential_3_3(:,index_column) =...
                table.(3);
            forces_pair_potential_3_3(:,index_column) =...
                table.(4);
        end
    end
end
% Generation of the average pair potential data from the data produced by
% the NVT Equilibration runs.
distance_pair_potential_1_1 = zeros(number_rows_pair_potential(1,1),1);
distance_pair_potential_1_2 = zeros(number_rows_pair_potential(2,1),1);
distance_pair_potential_1_3 = zeros(number_rows_pair_potential(3,1),1);
distance_pair_potential_2_2 = zeros(number_rows_pair_potential(4,1),1);
distance_pair_potential_2_3 = zeros(number_rows_pair_potential(5,1),1);
distance_pair_potential_3_3 = zeros(number_rows_pair_potential(6,1),1);
energy_pair_potential_1_1 = zeros(number_rows_pair_potential(1,1),1);
energy_pair_potential_1_2 = zeros(number_rows_pair_potential(2,1),1);
energy_pair_potential_1_3 = zeros(number_rows_pair_potential(3,1),1);
energy_pair_potential_2_2 = zeros(number_rows_pair_potential(4,1),1);
energy_pair_potential_2_3 = zeros(number_rows_pair_potential(5,1),1);
energy_pair_potential_3_3 = zeros(number_rows_pair_potential(6,1),1);
force_pair_potential_1_1 = zeros(number_rows_pair_potential(1,1),1);
force_pair_potential_1_2 = zeros(number_rows_pair_potential(2,1),1);
force_pair_potential_1_3 = zeros(number_rows_pair_potential(3,1),1);
force_pair_potential_2_2 = zeros(number_rows_pair_potential(4,1),1);
force_pair_potential_2_3 = zeros(number_rows_pair_potential(5,1),1);
force_pair_potential_3_3 = zeros(number_rows_pair_potential(6,1),1);
for index_row = 1:length(pair_interaction_types)
    for sub_index_row = 1:number_rows_pair_potential(index_row,1)
        if index_row == 1
            distance_pair_potential_1_1(sub_index_row,1) =...
                mean(distances_pair_potential_1_1(sub_index_row,:));
            energy_pair_potential_1_1(sub_index_row,1) =...
                mean(energies_pair_potential_1_1(sub_index_row,:));
            force_pair_potential_1_1(sub_index_row,1) =...
                mean(forces_pair_potential_1_1(sub_index_row,:));
        end
        if index_row == 2
            distance_pair_potential_1_2(sub_index_row,1) =...
                mean(distances_pair_potential_1_2(sub_index_row,:));
            energy_pair_potential_1_2(sub_index_row,1) =...
                mean(energies_pair_potential_1_2(sub_index_row,:));
            force_pair_potential_1_2(sub_index_row,1) =...
                mean(forces_pair_potential_1_2(sub_index_row,:));
        end
        if index_row == 3
            distance_pair_potential_1_3(sub_index_row,1) =...
                mean(distances_pair_potential_1_3(sub_index_row,:));
            energy_pair_potential_1_3(sub_index_row,1) =...
                mean(energies_pair_potential_1_3(sub_index_row,:));
            force_pair_potential_1_3(sub_index_row,1) =...
                mean(forces_pair_potential_1_3(sub_index_row,:));
        end
        if index_row == 4
            distance_pair_potential_2_2(sub_index_row,1) =...
                mean(distances_pair_potential_2_2(sub_index_row,:));
            energy_pair_potential_2_2(sub_index_row,1) =...
                mean(energies_pair_potential_2_2(sub_index_row,:));
            force_pair_potential_2_2(sub_index_row,1) =...
                mean(forces_pair_potential_2_2(sub_index_row,:));
        end
        if index_row == 5
            distance_pair_potential_2_3(sub_index_row,1) =...
                mean(distances_pair_potential_2_3(sub_index_row,:));
            energy_pair_potential_2_3(sub_index_row,1) =...
                mean(energies_pair_potential_2_3(sub_index_row,:));
            force_pair_potential_2_3(sub_index_row,1) =...
                mean(forces_pair_potential_2_3(sub_index_row,:));
        end
        if index_row == 6
            distance_pair_potential_3_3(sub_index_row,1) =...
                mean(distances_pair_potential_3_3(sub_index_row,:));
            energy_pair_potential_3_3(sub_index_row,1) =...
                mean(energies_pair_potential_3_3(sub_index_row,:));
            force_pair_potential_3_3(sub_index_row,1) =...
                mean(forces_pair_potential_3_3(sub_index_row,:));
        end
    end
end

%% Soft Pushoff + NVT Equilibration
% Concatenation of the data produced by the Soft Pushoff runs and the data
% produced by the NVT Equilibration runs.
time_dt_position_mgns =...
    [time_dt_position_soft_pushoff_mgns;...
    time_dt_position_equilibration_nvt_mgns];
time_dt_position_selgraftmon1_np1 =...
    [time_dt_position_soft_pushoff_selgraftmon1_np1;...
    time_dt_position_equilibration_nvt_selgraftmon1_np1];
time_dt_position_selgraftmon2_np2 =...
    [time_dt_position_soft_pushoff_selgraftmon2_np2;...
    time_dt_position_equilibration_nvt_selgraftmon2_np2];
time_dt_hyperaverage_radii_of_gyration =...
    [time_dt_hyperaverage_radii_of_gyration_soft_pushoff;...
    time_dt_hyperaverage_radii_of_gyration_equilibration_nvt];
time_dt_average_force_pgns =...
    [time_dt_average_force_soft_pushoff_pgns;...
    time_dt_average_force_equilibration_nvt_pgns];
time_tau_position_mgns =...
    [time_tau_position_soft_pushoff_mgns;...
    time_tau_position_equilibration_nvt_mgns];
time_tau_position_selgraftmon1_np1 =...
    [time_tau_position_soft_pushoff_selgraftmon1_np1;...
    time_tau_position_equilibration_nvt_selgraftmon1_np1];
time_tau_position_selgraftmon2_np2 =...
    [time_tau_position_soft_pushoff_selgraftmon2_np2;...
    time_tau_position_equilibration_nvt_selgraftmon2_np2];
time_tau_hyperaverage_radii_of_gyration =...
    [time_tau_hyperaverage_radii_of_gyration_soft_pushoff;...
    time_tau_hyperaverage_radii_of_gyration_equilibration_nvt];
time_tau_average_force_pgns =...
    [time_tau_average_force_soft_pushoff_pgns;...
    time_tau_average_force_equilibration_nvt_pgns];
distances_mgns = [distances_soft_pushoff_mgns;...
    distances_equilibration_nvt_mgns];
positions_r_selgraftmon1_np1 =...
    [positions_r_soft_pushoff_selgraftmon1_np1;...
    positions_r_equilibration_nvt_selgraftmon1_np1];
positions_theta_selgraftmon1_np1 =...
    [positions_theta_soft_pushoff_selgraftmon1_np1;...
    positions_theta_equilibration_nvt_selgraftmon1_np1];
positions_phi_selgraftmon1_np1 =...
    [positions_phi_soft_pushoff_selgraftmon1_np1;...
    positions_phi_equilibration_nvt_selgraftmon1_np1];
positions_r_selgraftmon2_np2 =...
    [positions_r_soft_pushoff_selgraftmon2_np2;...
    positions_r_equilibration_nvt_selgraftmon2_np2];
positions_theta_selgraftmon2_np2 =...
    [positions_theta_soft_pushoff_selgraftmon2_np2;...
    positions_theta_equilibration_nvt_selgraftmon2_np2];
positions_phi_selgraftmon2_np2 =...
    [positions_phi_soft_pushoff_selgraftmon2_np2;...
    positions_phi_equilibration_nvt_selgraftmon2_np2];
hyperaverage_radii_of_gyration =...
    [hyperaverage_radii_of_gyration_soft_pushoff;...
    hyperaverage_radii_of_gyration_equilibration_nvt];
average_forces_x_pgns =...
    [average_forces_x_soft_pushoff_pgns;...
    average_forces_x_equilibration_nvt_pgns];
average_forces_y_pgns =...
    [average_forces_y_soft_pushoff_pgns;...
    average_forces_y_equilibration_nvt_pgns];
average_forces_z_pgns =...
    [average_forces_z_soft_pushoff_pgns;...
    average_forces_z_equilibration_nvt_pgns];

% Exclusion of the data produced by the Soft Pushoff runs and
% time-shifting of the data produced by the NVT Equilibration runs.
time_dt_position_mgns =...
    time_dt_position_mgns(...
    size(time_dt_position_soft_pushoff_mgns,1):end) -...
    time_dt_position_soft_pushoff_mgns(end);
time_dt_position_selgraftmon1_np1 =...
    time_dt_position_selgraftmon1_np1(...
    size(time_dt_position_soft_pushoff_selgraftmon1_np1,1):end) -...
    time_dt_position_soft_pushoff_selgraftmon1_np1(end);
time_dt_position_selgraftmon2_np2 =...
    time_dt_position_selgraftmon2_np2(...
    size(time_dt_position_soft_pushoff_selgraftmon2_np2,1):end) -...
    time_dt_position_soft_pushoff_selgraftmon2_np2(end);
time_dt_hyperaverage_radii_of_gyration =...
    time_dt_hyperaverage_radii_of_gyration(...
    size(time_dt_hyperaverage_radii_of_gyration_soft_pushoff,1):end) -...
    time_dt_hyperaverage_radii_of_gyration_soft_pushoff(end);
time_dt_average_force_pgns =...
    time_dt_average_force_pgns(...
    size(time_dt_average_force_soft_pushoff_pgns,1):end) -...
    time_dt_average_force_soft_pushoff_pgns(end);
time_tau_position_mgns =...
    time_tau_position_mgns(...
    size(time_tau_position_soft_pushoff_mgns,1):end) -...
    time_tau_position_soft_pushoff_mgns(end);
time_tau_position_selgraftmon1_np1 =...
    time_tau_position_selgraftmon1_np1(...
    size(time_tau_position_soft_pushoff_selgraftmon1_np1,1):end) -...
    time_tau_position_soft_pushoff_selgraftmon1_np1(end);
time_tau_position_selgraftmon2_np2 =...
    time_tau_position_selgraftmon2_np2(...
    size(time_tau_position_soft_pushoff_selgraftmon2_np2,1):end) -...
    time_tau_position_soft_pushoff_selgraftmon2_np2(end);
time_tau_hyperaverage_radii_of_gyration =...
    time_tau_hyperaverage_radii_of_gyration(...
    size(time_tau_hyperaverage_radii_of_gyration_soft_pushoff,1):end) -...
    time_tau_hyperaverage_radii_of_gyration_soft_pushoff(end);
time_tau_average_force_pgns =...
    time_tau_average_force_pgns(...
    size(time_tau_average_force_soft_pushoff_pgns,1):end) -...
    time_tau_average_force_soft_pushoff_pgns(end);
distances_mgns =...
    distances_mgns(...
    size(distances_soft_pushoff_mgns,1):end,:);
positions_r_selgraftmon1_np1 =...
    positions_r_selgraftmon1_np1(...
    size(positions_r_soft_pushoff_selgraftmon1_np1,1):end,:);
positions_theta_selgraftmon1_np1 =...
    positions_theta_selgraftmon1_np1(...
    size(positions_theta_soft_pushoff_selgraftmon1_np1,1):end,:);
positions_phi_selgraftmon1_np1 =...
    positions_phi_selgraftmon1_np1(...
    size(positions_phi_soft_pushoff_selgraftmon1_np1,1):end,:);
positions_r_selgraftmon2_np2 =...
    positions_r_selgraftmon2_np2(...
    size(positions_r_soft_pushoff_selgraftmon2_np2,1):end,:);
positions_theta_selgraftmon2_np2 =...
    positions_theta_selgraftmon2_np2(...
    size(positions_theta_soft_pushoff_selgraftmon2_np2,1):end,:);
positions_phi_selgraftmon2_np2 =...
    positions_phi_selgraftmon2_np2(...
    size(positions_phi_soft_pushoff_selgraftmon2_np2,1):end,:);
hyperaverage_radii_of_gyration =...
    hyperaverage_radii_of_gyration(...
    size(hyperaverage_radii_of_gyration_soft_pushoff,1):end,:);
average_forces_x_pgns =...
    average_forces_x_pgns(...
    size(average_forces_x_soft_pushoff_pgns,1):end,:);
average_forces_y_pgns =...
    average_forces_y_pgns(...
    size(average_forces_y_soft_pushoff_pgns,1):end,:);
average_forces_z_pgns =...
    average_forces_z_pgns(...
    size(average_forces_z_soft_pushoff_pgns,1):end,:);

% Generation of the equilibrium data.
hyperaverage_radii_of_gyration_equilibrium =...
    zeros(1,length(distances_monomer_grafted_nanoparticles));
average_force_equilibrium_x_pgns =...
    zeros(1,length(distances_monomer_grafted_nanoparticles));
average_force_equilibrium_y_pgns =...
    zeros(1,length(distances_monomer_grafted_nanoparticles));
average_force_equilibrium_z_pgns =...
    zeros(1,length(distances_monomer_grafted_nanoparticles));
standard_deviation_hyperaverage_radii_of_gyration_equilibrium =...
    zeros(1,length(distances_monomer_grafted_nanoparticles));
standard_deviation_average_force_equilibrium_x_pgns =...
    zeros(1,length(distances_monomer_grafted_nanoparticles));
standard_deviation_average_force_equilibrium_y_pgns =...
    zeros(1,length(distances_monomer_grafted_nanoparticles));
standard_deviation_average_force_equilibrium_z_pgns =...
    zeros(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    hyperaverage_radii_of_gyration_equilibrium(1,index_column) =...
        mean(...
        hyperaverage_radii_of_gyration(...
        threshold_time_data_points_equilibrium+2:end,index_column));
    average_force_equilibrium_x_pgns(1,index_column) =...
        mean(...
        average_forces_x_pgns(...
        threshold_time_data_points_equilibrium+2:end,index_column));
    average_force_equilibrium_y_pgns(1,index_column) =...
        mean(...
        average_forces_y_pgns(...
        threshold_time_data_points_equilibrium+2:end,index_column));
    average_force_equilibrium_z_pgns(1,index_column) =...
        mean(...
        average_forces_z_pgns(...
        threshold_time_data_points_equilibrium+2:end,index_column));
    standard_deviation_hyperaverage_radii_of_gyration_equilibrium(...
        1,index_column) =...
        std(...
        hyperaverage_radii_of_gyration(...
        threshold_time_data_points_equilibrium+2:end,index_column));
    standard_deviation_average_force_equilibrium_x_pgns(...
        1,index_column) =...
        std(...
        average_forces_x_pgns(...
        threshold_time_data_points_equilibrium+2:end,index_column));
    standard_deviation_average_force_equilibrium_y_pgns(...
        1,index_column) =...
        std(...
        average_forces_y_pgns(...
        threshold_time_data_points_equilibrium+2:end,index_column));
    standard_deviation_average_force_equilibrium_z_pgns(...
        1,index_column) =...
        std(...
        average_forces_z_pgns(...
        threshold_time_data_points_equilibrium+2:end,index_column));
end
% The values of hyperaverage_radii_of_gyration_equilibrium,
% average_force_equilibrium_x_pgns,
% average_force_equilibrium_y_pgns, and
% average_force_equilibrium_z_pgns are the block time averages of
% hyperaverage_radii_of_gyration_equilibrium,
% average_forces_x_pgns,
% average_forces_y_pgns, and
% average_forces_z_pgns, respectively, over the
% half-open time interval (threshold_dt_equilibrium,end], in timesteps.
fprintf('Reference Equilibrium Radius of Gyration for Ɛ = 0.000000 k_BT: ')
fprintf('%11.8f +/- %9.8f σ\n',...
    reference_radius_of_gyration_equilibrium,...
    standard_deviation_radius_of_gyration_equilibrium)
fprintf('Reference Equilibrium Radius of Gyration for Ɛ = %7.6f k_BT: ',...
    epsilon_attractive)
reference_radii_of_gyration_equilibrium =...
    mean(hyperaverage_radii_of_gyration_equilibrium(...
    end-number_values_hyperaverage_radii_of_gyration_equilibrium+1:end));
standard_deviation_reference_radii_of_gyration_equilibrium =...
    std(hyperaverage_radii_of_gyration_equilibrium(...
    end-number_values_hyperaverage_radii_of_gyration_equilibrium+1:end));
fprintf('%11.8f +/- %9.8f σ\n',...
    reference_radii_of_gyration_equilibrium,...
    standard_deviation_reference_radii_of_gyration_equilibrium)
% The value of reference_hyperaverage_radii_of_gyration_equilibrium is the
% average of the number_values_hyperaverage_radii_of_gyration_equilibrium
% values in hyperaverage_radii_of_gyration_equilibrium associated with the
% number_values_hyperaverage_radii_of_gyration_equilibrium longest sampled
% distances between monomer-grafted nanoparticles.

% Generation of the potential of mean force data.
potential_of_mean_force_pgns =...
    flip(cumtrapz(flip(distances_monomer_grafted_nanoparticles),...
    flip(-average_force_equilibrium_x_pgns)));
% potential_of_mean_force_pgns is calculated using the constant of
% integration potential_of_mean_force_pgns(end) = 0.
index_potential_of_mean_force_pgns = 1;
if potential_of_mean_force_pgns(index_potential_of_mean_force_pgns) <=...
        cutoff_potential_of_mean_force_pgns
    cutoff_potential_of_mean_force_pgns = [];
    cutoff_distances_monomer_grafted_nanoparticles = [];
else
    while potential_of_mean_force_pgns(index_potential_of_mean_force_pgns) >...
            cutoff_potential_of_mean_force_pgns
        index_potential_of_mean_force_pgns =...
            index_potential_of_mean_force_pgns + 1;
    end
    cutoff_distances_monomer_grafted_nanoparticles = interp1(...
        [potential_of_mean_force_pgns(...
        index_potential_of_mean_force_pgns-1)...
        potential_of_mean_force_pgns(...
        index_potential_of_mean_force_pgns)],...
        [distances_monomer_grafted_nanoparticles(...
        index_potential_of_mean_force_pgns-1)...
        distances_monomer_grafted_nanoparticles(...
        index_potential_of_mean_force_pgns)],...
        cutoff_potential_of_mean_force_pgns);
end
truncated_potential_of_mean_force_pgns =...
    [cutoff_potential_of_mean_force_pgns...
    potential_of_mean_force_pgns(...
    index_potential_of_mean_force_pgns:end)];
truncated_distances_monomer_grafted_nanoparticles =...
    [cutoff_distances_monomer_grafted_nanoparticles;...
    distances_monomer_grafted_nanoparticles(...
    index_potential_of_mean_force_pgns:end)];
truncated_normalized_distances_monomer_grafted_nanoparticles =...
    truncated_distances_monomer_grafted_nanoparticles ./...
    (2 * (radius_nanoparticles + reference_radius_of_gyration_equilibrium));

% Exporting of potential of mean force data to
% potential_of_mean_force_pgns.txt. potential_of_mean_force_pgns.txt is to
% be input by GEMC.c.
pointer_potential_of_mean_force_pgns =...
    fopen('potential_of_mean_force_pgns.txt','w');
fprintf(pointer_potential_of_mean_force_pgns,'%9.8f\t%11.8f\n',...
    [truncated_normalized_distances_monomer_grafted_nanoparticles';...
    truncated_potential_of_mean_force_pgns]);
fclose(pointer_potential_of_mean_force_pgns);

% Generation of check equilibrium average force data.
distances_monomer_grafted_nanoparticles_shifted_reduced =...
    zeros(length(sampling_intervals_distances_monomer_grafted_nanoparticles),1);
for index_row =...
        1:length(sampling_intervals_distances_monomer_grafted_nanoparticles)
    distances_monomer_grafted_nanoparticles_shifted_reduced(index_row) =...
        distances_monomer_grafted_nanoparticles(index_row) +...
        sampling_intervals_distances_monomer_grafted_nanoparticles(index_row)...
        / 2;
end
average_force_pgns_check = diff(-potential_of_mean_force_pgns)...
    ./ sampling_intervals_distances_monomer_grafted_nanoparticles';
% average_force_pgns_check is expected to match
% average_force_equilibrium_x_component_pgns.

% Backward block averaging of the time series data produced by the NVT
% Equilibration runs.
block_averaging = @(block_structure) mean2(block_structure.data(:));
number_data_points_block_distances_mgns = [floor(mean([...
    length(time_dt_position_mgns)...
    length(time_tau_position_mgns)...
    length(distances_mgns)])...
    /number_blocks_timesteps),1];
time_dt_position_mgns =...
    flip(time_dt_position_mgns);
time_tau_position_mgns =...
    flip(time_tau_position_mgns);
distances_mgns =...
    flip(distances_mgns);
time_dt_position_mgns =...
    blockproc(time_dt_position_mgns,...
    number_data_points_block_distances_mgns,...
    block_averaging);
time_tau_position_mgns =...
    blockproc(time_tau_position_mgns,...
    number_data_points_block_distances_mgns,...
    block_averaging);
distances_mgns =...
    blockproc(distances_mgns,...
    number_data_points_block_distances_mgns,...
    block_averaging);
time_dt_position_mgns =...
    flip(time_dt_position_mgns);
time_tau_position_mgns =...
    flip(time_tau_position_mgns);
distances_mgns =...
    flip(distances_mgns);
number_data_points_block_positions_selgraftmon1_np1 = [floor(mean([...
    length(time_dt_position_selgraftmon1_np1)...
    length(time_tau_position_selgraftmon1_np1)...
    length(positions_r_selgraftmon1_np1)...
    length(positions_theta_selgraftmon1_np1)...
    length(positions_phi_selgraftmon1_np1)])...
    /number_blocks_timesteps),1];
time_dt_position_selgraftmon1_np1 =...
    flip(time_dt_position_selgraftmon1_np1);
time_tau_position_selgraftmon1_np1 =...
    flip(time_tau_position_selgraftmon1_np1);
positions_r_selgraftmon1_np1 =...
    flip(positions_r_selgraftmon1_np1);
positions_theta_selgraftmon1_np1 =...
    flip(positions_theta_selgraftmon1_np1);
positions_phi_selgraftmon1_np1 =...
    flip(positions_phi_selgraftmon1_np1);
time_dt_position_selgraftmon1_np1 =...
    blockproc(time_dt_position_selgraftmon1_np1,...
    number_data_points_block_positions_selgraftmon1_np1,...
    block_averaging);
time_tau_position_selgraftmon1_np1 =...
    blockproc(time_tau_position_selgraftmon1_np1,...
    number_data_points_block_positions_selgraftmon1_np1,...
    block_averaging);
positions_r_selgraftmon1_np1 =...
    blockproc(positions_r_selgraftmon1_np1,...
    number_data_points_block_positions_selgraftmon1_np1,...
    block_averaging);
positions_theta_selgraftmon1_np1 =...
    blockproc(positions_theta_selgraftmon1_np1,...
    number_data_points_block_positions_selgraftmon1_np1,...
    block_averaging);
positions_phi_selgraftmon1_np1 =...
    blockproc(positions_phi_selgraftmon1_np1,...
    number_data_points_block_positions_selgraftmon1_np1,...
    block_averaging);
time_dt_position_selgraftmon1_np1 =...
    flip(time_dt_position_selgraftmon1_np1);
time_tau_position_selgraftmon1_np1 =...
    flip(time_tau_position_selgraftmon1_np1);
positions_r_selgraftmon1_np1 =...
    flip(positions_r_selgraftmon1_np1);
positions_r_selgraftmon1_np1 =...
    round(positions_r_selgraftmon1_np1,3);
positions_theta_selgraftmon1_np1 =...
    flip(positions_theta_selgraftmon1_np1);
positions_phi_selgraftmon1_np1 =...
    flip(positions_phi_selgraftmon1_np1);
number_data_points_block_positions_selgraftmon2_np2 = [floor(mean([...
    length(time_dt_position_selgraftmon2_np2)...
    length(time_tau_position_selgraftmon2_np2)...
    length(positions_r_selgraftmon2_np2)...
    length(positions_theta_selgraftmon2_np2)...
    length(positions_phi_selgraftmon2_np2)])...
    /number_blocks_timesteps),1];
time_dt_position_selgraftmon2_np2 =...
    flip(time_dt_position_selgraftmon2_np2);
time_tau_position_selgraftmon2_np2 =...
    flip(time_tau_position_selgraftmon2_np2);
positions_r_selgraftmon2_np2 =...
    flip(positions_r_selgraftmon2_np2);
positions_theta_selgraftmon2_np2 =...
    flip(positions_theta_selgraftmon2_np2);
positions_phi_selgraftmon2_np2 =...
    flip(positions_phi_selgraftmon2_np2);
time_dt_position_selgraftmon2_np2 =...
    blockproc(time_dt_position_selgraftmon2_np2,...
    number_data_points_block_positions_selgraftmon2_np2,...
    block_averaging);
time_tau_position_selgraftmon2_np2 =...
    blockproc(time_tau_position_selgraftmon2_np2,...
    number_data_points_block_positions_selgraftmon2_np2,...
    block_averaging);
positions_r_selgraftmon2_np2 =...
    blockproc(positions_r_selgraftmon2_np2,...
    number_data_points_block_positions_selgraftmon2_np2,...
    block_averaging);
positions_theta_selgraftmon2_np2 =...
    blockproc(positions_theta_selgraftmon2_np2,...
    number_data_points_block_positions_selgraftmon2_np2,...
    block_averaging);
positions_phi_selgraftmon2_np2 =...
    blockproc(positions_phi_selgraftmon2_np2,...
    number_data_points_block_positions_selgraftmon2_np2,...
    block_averaging);
time_dt_position_selgraftmon2_np2 =...
    flip(time_dt_position_selgraftmon2_np2);
time_tau_position_selgraftmon2_np2 =...
    flip(time_tau_position_selgraftmon2_np2);
positions_r_selgraftmon2_np2 =...
    flip(positions_r_selgraftmon2_np2);
positions_r_selgraftmon2_np2 =...
    round(positions_r_selgraftmon2_np2,3);
positions_theta_selgraftmon2_np2 =...
    flip(positions_theta_selgraftmon2_np2);
positions_phi_selgraftmon2_np2 =...
    flip(positions_phi_selgraftmon2_np2);
number_data_points_block_hyperaverage_radii_of_gyration = [floor(mean([...
    length(time_dt_hyperaverage_radii_of_gyration)...
    length(time_tau_hyperaverage_radii_of_gyration)...
    length(hyperaverage_radii_of_gyration)])...
    /number_blocks_timesteps),1];
time_dt_hyperaverage_radii_of_gyration =...
    flip(time_dt_hyperaverage_radii_of_gyration);
time_tau_hyperaverage_radii_of_gyration =...
    flip(time_tau_hyperaverage_radii_of_gyration);
hyperaverage_radii_of_gyration =...
    flip(hyperaverage_radii_of_gyration);
time_dt_hyperaverage_radii_of_gyration =...
    blockproc(time_dt_hyperaverage_radii_of_gyration,...
    number_data_points_block_hyperaverage_radii_of_gyration,...
    block_averaging);
time_tau_hyperaverage_radii_of_gyration =...
    blockproc(time_tau_hyperaverage_radii_of_gyration,...
    number_data_points_block_hyperaverage_radii_of_gyration,...
    block_averaging);
hyperaverage_radii_of_gyration =...
    blockproc(hyperaverage_radii_of_gyration,...
    number_data_points_block_hyperaverage_radii_of_gyration,...
    block_averaging);
time_dt_hyperaverage_radii_of_gyration =...
    flip(time_dt_hyperaverage_radii_of_gyration);
time_tau_hyperaverage_radii_of_gyration =...
    flip(time_tau_hyperaverage_radii_of_gyration);
hyperaverage_radii_of_gyration =...
    flip(hyperaverage_radii_of_gyration);
number_data_points_block_average_force_pgns = [floor(mean([...
    length(time_dt_average_force_pgns)...
    length(time_tau_average_force_pgns)...
    length(average_forces_x_pgns)...
    length(average_forces_y_pgns)...
    length(average_forces_z_pgns)])...
    /number_blocks_timesteps),1];
time_dt_average_force_pgns =...
    flip(time_dt_average_force_pgns);
time_tau_average_force_pgns =...
    flip(time_tau_average_force_pgns);
average_forces_x_pgns =...
    flip(average_forces_x_pgns);
average_forces_y_pgns =...
    flip(average_forces_y_pgns);
average_forces_z_pgns =...
    flip(average_forces_z_pgns);
time_dt_average_force_pgns =...
    blockproc(time_dt_average_force_pgns,...
    number_data_points_block_average_force_pgns,...
    block_averaging);
time_tau_average_force_pgns =...
    blockproc(time_tau_average_force_pgns,...
    number_data_points_block_average_force_pgns,...
    block_averaging);
average_forces_x_pgns =...
    blockproc(average_forces_x_pgns,...
    number_data_points_block_average_force_pgns,...
    block_averaging);
average_forces_y_pgns =...
    blockproc(average_forces_y_pgns,...
    number_data_points_block_average_force_pgns,...
    block_averaging);
average_forces_z_pgns =...
    blockproc(average_forces_z_pgns,...
    number_data_points_block_average_force_pgns,...
    block_averaging);
time_dt_average_force_pgns =...
    flip(time_dt_average_force_pgns);
time_tau_average_force_pgns =...
    flip(time_tau_average_force_pgns);
average_forces_x_pgns =...
    flip(average_forces_x_pgns);
average_forces_y_pgns =...
    flip(average_forces_y_pgns);
average_forces_z_pgns =...
    flip(average_forces_z_pgns);

%% Data Plotting
% Plotting of distance between monomer-grafted nanoparticles
% versus time for different sampled distances between monomer-grafted
% nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_position_mgns) > 0
    if max(time_tau_position_mgns) > round(...
            max(time_tau_position_mgns),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_position_mgns),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis =...
            round(...
            max(time_tau_position_mgns),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
min_y_axis = round(min(min(distances_mgns)));
max_y_axis = round(max(max(distances_mgns)));
fig = figure(1);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_position_mgns(2:end),...
        distances_mgns(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_position_mgns(2:end),...
        distances_mgns(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTick = unique([max_y_axis,ax.YTick]);
ax.YTickLabel =...
    arrayfun(@(distances_mgns)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    distances_mgns),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{r_{MGN_{1} - MGN_{2}} \: (\sigma)}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'r_mgn2_mgn1_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of r component of position of SelectedGraftedMonomer1 with
% respect to NP1 versus time for different sampled distances between
% monomer-grafted nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_position_selgraftmon1_np1) > 0
    if max(time_tau_position_selgraftmon1_np1) > round(...
            max(time_tau_position_selgraftmon1_np1),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_position_selgraftmon1_np1),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis = round(...
            max(time_tau_position_selgraftmon1_np1),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
spacing_y_axis = .1;
min_y_axis = radius_nanoparticles;
max_y_axis = radius_nanoparticles + 1;
fig = figure(2);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_position_selgraftmon1_np1(2:end),...
        positions_r_selgraftmon1_np1(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_position_selgraftmon1_np1(2:end),...
        positions_r_selgraftmon1_np1(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTick = min_y_axis:spacing_y_axis:max_y_axis;
ax.YAxis.TickLabelFormat = '%.1f';
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{r_{NP_{1} - Grafted \: Monomer_{1}} \: (\sigma)}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'r_selgraftmon1_np1_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of theta component of position of SelectedGraftedMonomer1
% with respect to NP1 versus time for different sampled distances
% between monomer-grafted nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_position_selgraftmon1_np1) > 0
    if max(time_tau_position_selgraftmon1_np1) > round(...
            max(time_tau_position_selgraftmon1_np1),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_position_selgraftmon1_np1),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis = round(...
            max(time_tau_position_selgraftmon1_np1),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
fig = figure(3);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    90.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    90.*[-1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_position_selgraftmon1_np1(2:end),...
        positions_theta_selgraftmon1_np1(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_position_selgraftmon1_np1(2:end),...
        positions_theta_selgraftmon1_np1(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    90.*[-1 1],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = 90.*[-1 1];
ax.YTick = -90:15:90;
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{\theta_{NP_{1} - Grafted \: Monomer_{1}} \: (^{\circ})}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'theta_selgraftmon1_np1_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of phi component of position of SelectedGraftedMonomer1 with
% respect to NP1 versus time for different sampled distances between
% monomer-grafted nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_position_selgraftmon1_np1) > 0
    if max(time_tau_position_selgraftmon1_np1) > round(...
            max(time_tau_position_selgraftmon1_np1),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_position_selgraftmon1_np1),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis = round(...
            max(time_tau_position_selgraftmon1_np1),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
fig = figure(4);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    180.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    180.*[-1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_position_selgraftmon1_np1(2:end),...
        positions_phi_selgraftmon1_np1(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_position_selgraftmon1_np1(2:end),...
        positions_phi_selgraftmon1_np1(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    180.*[-1 1],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = 180.*[-1 1];
ax.YTick = -180:30:180;
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{\phi_{NP_{1} - Grafted \: Monomer_{1}} \: (^{\circ})}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'phi_selgraftmon1_np1_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of r component of position of SelectedGraftedMonomer2 with
% respect to NP2 versus time for different sampled distances between
% monomer-grafted nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_position_selgraftmon2_np2) > 0
    if max(time_tau_position_selgraftmon2_np2) > round(...
            max(time_tau_position_selgraftmon2_np2),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_position_selgraftmon2_np2),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis = round(...
            max(time_tau_position_selgraftmon2_np2),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
spacing_y_axis = .1;
min_y_axis = radius_nanoparticles;
max_y_axis = radius_nanoparticles + 1;
fig = figure(5);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_position_selgraftmon2_np2(2:end),...
        positions_r_selgraftmon2_np2(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_position_selgraftmon2_np2(2:end),...
        positions_r_selgraftmon2_np2(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTick = min_y_axis:spacing_y_axis:max_y_axis;
ax.YAxis.TickLabelFormat = '%.1f';
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{r_{NP_{2} - Grafted \: Monomer_{2}} \: (\sigma)}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'r_selgraftmon2_np2_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of theta component of position of SelectedGraftedMonomer2
% with respect to NP2 versus time for different sampled distances
% between monomer-grafted nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_position_selgraftmon2_np2) > 0
    if max(time_tau_position_selgraftmon2_np2) > round(...
            max(time_tau_position_selgraftmon2_np2),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_position_selgraftmon2_np2),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis = round(...
            max(time_tau_position_selgraftmon2_np2),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
fig = figure(6);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    90.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    90.*[-1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_position_selgraftmon2_np2(2:end),...
        positions_theta_selgraftmon2_np2(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_position_selgraftmon2_np2(2:end),...
        positions_theta_selgraftmon2_np2(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    90.*[-1 1],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = 90.*[-1 1];
ax.YTick = -90:15:90;
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{\theta_{NP_{2} - Grafted \: Monomer_{2}} \: (^{\circ})}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'theta_selgraftmon2_np2_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of phi component of position of SelectedGraftedMonomer2 with
% respect to NP2 versus time for different sampled distances between
% monomer-grafted nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_position_selgraftmon2_np2) > 0
    if max(time_tau_position_selgraftmon2_np2) > round(...
            max(time_tau_position_selgraftmon2_np2),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_position_selgraftmon2_np2),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis = round(...
            max(time_tau_position_selgraftmon2_np2),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
fig = figure(7);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    180.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    180.*[-1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_position_selgraftmon2_np2(2:end),...
        positions_phi_selgraftmon2_np2(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_position_selgraftmon2_np2(2:end),...
        positions_phi_selgraftmon2_np2(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    180.*[-1 1],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = 180.*[-1 1];
ax.YTick = -180:30:180;
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{\phi_{NP_{2} - Grafted \: Monomer_{2}} \: (^{\circ})}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'phi_selgraftmon2_np2_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of average over grafted chains of time average of radii of
% gyration of grafted chains versus time for different sampled distances
% between monomer-grafted nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_hyperaverage_radii_of_gyration) > 0
    if max(time_tau_hyperaverage_radii_of_gyration) > round(...
            max(time_tau_hyperaverage_radii_of_gyration),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_hyperaverage_radii_of_gyration),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis = round(...
            max(time_tau_hyperaverage_radii_of_gyration),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
max_order_magnitude_spacing_y_axis = 0;
spacing_y_axis = 10^max_order_magnitude_spacing_y_axis / 2;
min_y_axis =...
    floor(min(min(hyperaverage_radii_of_gyration(2:end,:)))) +...
    fix((min(min(hyperaverage_radii_of_gyration(2:end,:)))-...
    floor(min(min(hyperaverage_radii_of_gyration(2:end,:)))))/...
    spacing_y_axis) *...
    spacing_y_axis;
max_y_axis =...
    ceil(max(max(hyperaverage_radii_of_gyration(2:end,:)))) +...
    fix((max(max(hyperaverage_radii_of_gyration(2:end,:)))-...
    ceil(max(max(hyperaverage_radii_of_gyration(2:end,:)))))/...
    spacing_y_axis) *...
    spacing_y_axis;
fig = figure(8);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_line_mean =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    m = hyperaverage_radii_of_gyration_equilibrium...
        (1,index_column);
    x = [min_x_axis max_x_axis];
    y = m .* [1 1];
    handles_line_mean(index_column) = line(...
        x,...
        y,...
        'LineStyle','-.',...
        'Color',colormap(index_column,:),...
        'LineWidth',1); %#ok<*NASGU>
        hold on
end
handles_rectangle =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    m = hyperaverage_radii_of_gyration_equilibrium...
        (1,index_column);
    s = standard_deviation_hyperaverage_radii_of_gyration_equilibrium...
        (1,index_column);
    x = min_x_axis;
    y = m - s;
    w = max_x_axis - min_x_axis;
    h = 2 * s;
    handles_rectangle(index_column) = rectangle(...
        'Position',[x,y,w,h],...
        'LineStyle','none',...
        'FaceColor',horzcat(colormap(index_column,:)),...
        'FaceAlpha',.25); %#ok<*NASGU>
        hold on
end
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_hyperaverage_radii_of_gyration(2:end),...
        hyperaverage_radii_of_gyration(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_hyperaverage_radii_of_gyration(2:end),...
        hyperaverage_radii_of_gyration(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTickLabel =...
    arrayfun(@(hyperaverage_radii_of_gyration)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    hyperaverage_radii_of_gyration),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{R_{g_{Grafted \: Monomer}} \: (\sigma)}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'R_g_selgraftmon_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of average over grafted chains of equilibrium radii of
% gyration of grafted chains versus distance between monomer-grafted
% nanoparticles.
min_x_axis = 0;
max_x_axis = max(distances_monomer_grafted_nanoparticles);
max_order_magnitude_spacing_y_axis = 0;
spacing_y_axis = 10^max_order_magnitude_spacing_y_axis / 2;
min_y_axis =...
    floor(min(hyperaverage_radii_of_gyration_equilibrium)) +...
    fix((min(hyperaverage_radii_of_gyration_equilibrium)-...
    floor(min(hyperaverage_radii_of_gyration_equilibrium)))/...
    spacing_y_axis) *...
    spacing_y_axis;
max_y_axis =...
    ceil(max(hyperaverage_radii_of_gyration_equilibrium)) +...
    fix((max(hyperaverage_radii_of_gyration_equilibrium)-...
    ceil(max(hyperaverage_radii_of_gyration_equilibrium)))/...
    spacing_y_axis) *...
    spacing_y_axis;
fig = figure(9);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = gray;
m = reference_radii_of_gyration_equilibrium;
x = [min_x_axis max_x_axis];
y = m .* [1 1];
handle_line_mean = line(...
    x,...
    y,...
    'LineStyle','-.',...
    'Color',colormap(128,:),...
    'LineWidth',1); %#ok<*NASGU>
hold on
m = reference_radii_of_gyration_equilibrium;
s = standard_deviation_reference_radii_of_gyration_equilibrium;
x = min_x_axis;
y = m - s;
w = max_x_axis - min_x_axis;
h = 2 * s;
handle_rectangle = rectangle(...
    'Position',[x,y,w,h],...
    'LineStyle','none',...
    'FaceColor',horzcat(colormap(128,:)),...
    'FaceAlpha',.25); %#ok<*NASGU>
hold on
handle_plot = plot(...
    distances_monomer_grafted_nanoparticles,...
    hyperaverage_radii_of_gyration_equilibrium,...
    'Color',colormap(128,:),...
    'LineWidth',2);
hold on
handle_scatter = scatter(...
    distances_monomer_grafted_nanoparticles,...
    hyperaverage_radii_of_gyration_equilibrium,...
    20,'o',...
    'MarkerEdgeColor',colormap(128,:),...
    'MarkerFaceColor',colormap(128,:),...
    'LineWidth',2); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XTickLabel =...
    arrayfun(@(distances_monomer_grafted_nanoparticles)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.XTick),'\.(\d+)','tokens')))),...
    distances_monomer_grafted_nanoparticles),ax.XTick,...
    'UniformOutput',false);
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{r_{0} \: (\sigma)}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTickLabel =...
    arrayfun(@(hyperaverage_radii_of_gyration_equilibrium)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    hyperaverage_radii_of_gyration_equilibrium),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{R_{g_{Grafted \: Monomer}} \: (\sigma)}$';
print(fig,strcat(...
    'R_g_selgraftmon_vs_r_0_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of y component of particle average of time average of force
% on a polymer-grafted nanoparticle of a pair versus time for different
% sampled distances between monomer-grafted nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_average_force_pgns) > 0
    if max(time_tau_average_force_pgns) > round(...
            max(time_tau_average_force_pgns),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_average_force_pgns),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis = round(...
            max(time_tau_average_force_pgns),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
min_y_axis =...
    min(average_force_equilibrium_y_pgns) -...
    max(standard_deviation_average_force_equilibrium_y_pgns);
max_y_axis =...
    max(average_force_equilibrium_y_pgns) +...
    max(standard_deviation_average_force_equilibrium_y_pgns);
fig = figure(10);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    max([abs(min_y_axis) abs(max_y_axis)]).*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    max([abs(min_y_axis) abs(max_y_axis)]).*[-1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_line_mean =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    m = average_force_equilibrium_y_pgns...
        (1,index_column);
    x = [min_x_axis max_x_axis];
    y = m .* [1 1];
    handles_line_mean(index_column) = line(...
        x,...
        y,...
        'LineStyle','-.',...
        'Color',colormap(index_column,:),...
        'LineWidth',1); %#ok<*NASGU>
    hold on
end
handles_rectangle =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    m = average_force_equilibrium_y_pgns...
        (1,index_column);
    s = standard_deviation_average_force_equilibrium_y_pgns...
        (1,index_column);
    x = min_x_axis;
    y = m - s;
    w = max_x_axis - min_x_axis;
    h = 2 * s;
    handles_rectangle(index_column) = rectangle(...
        'Position',[x,y,w,h],...
        'LineStyle','none',...
        'FaceColor',horzcat(colormap(index_column,:)),...
        'FaceAlpha',.25); %#ok<*NASGU>
    hold on
end
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_average_force_pgns(2:end),...
        average_forces_y_pgns(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_average_force_pgns(2:end),...
        average_forces_y_pgns(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    max([abs(min_y_axis) abs(max_y_axis)]).*[-1 1],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = max([abs(min_y_axis) abs(max_y_axis)]).*[-1 1];
ax.YTickLabel =...
    arrayfun(@(average_forces_y_pgns)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    average_forces_y_pgns),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{f_{PGN_{y}} \: (m \cdot \sigma \cdot \tau^{- 2})}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'f_pgn_y_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of z component of particle average of time average of force
% on a polymer-grafted nanoparticle of a pair versus time for different
% sampled distances between monomer-grafted nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_average_force_pgns) > 0
    if max(time_tau_average_force_pgns) > round(...
            max(time_tau_average_force_pgns),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_average_force_pgns),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis = round(...
            max(time_tau_average_force_pgns),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
min_y_axis =...
    min(average_force_equilibrium_z_pgns) -...
    max(standard_deviation_average_force_equilibrium_z_pgns);
max_y_axis =...
    max(average_force_equilibrium_z_pgns) +...
    max(standard_deviation_average_force_equilibrium_z_pgns);
fig = figure(11);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    max([abs(min_y_axis) abs(max_y_axis)]).*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    max([abs(min_y_axis) abs(max_y_axis)]).*[-1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_line_mean =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    m = average_force_equilibrium_z_pgns...
        (1,index_column);
    x = [min_x_axis max_x_axis];
    y = m .* [1 1];
    handles_line_mean(index_column) = line(...
        x,...
        y,...
        'LineStyle','-.',...
        'Color',colormap(index_column,:),...
        'LineWidth',1); %#ok<*NASGU>
    hold on
end
handles_rectangle =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    m = average_force_equilibrium_z_pgns...
        (1,index_column);
    s = standard_deviation_average_force_equilibrium_z_pgns...
        (1,index_column);
    x = min_x_axis;
    y = m - s;
    w = max_x_axis - min_x_axis;
    h = 2 * s;
    handles_rectangle(index_column) = rectangle(...
        'Position',[x,y,w,h],...
        'LineStyle','none',...
        'FaceColor',horzcat(colormap(index_column,:)),...
        'FaceAlpha',.25); %#ok<*NASGU>
    hold on
end
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_average_force_pgns(2:end),...
        average_forces_z_pgns(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_average_force_pgns(2:end),...
        average_forces_z_pgns(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    max([abs(min_y_axis) abs(max_y_axis)]).*[-1 1],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = max([abs(min_y_axis) abs(max_y_axis)]).*[-1 1];
ax.YTickLabel =...
    arrayfun(@(average_forces_z_pgns)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    average_forces_z_pgns),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{f_{PGN_{z}} \: (m \cdot \sigma \cdot \tau^{- 2})}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'f_pgn_z_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of x component of particle average of time average of force
% on a polymer-grafted nanoparticle of a pair versus time for different
% sampled distances between monomer-grafted nanoparticles.
max_order_magnitude_spacing_x_axis = 3;
spacing_x_axis = 10^max_order_magnitude_spacing_x_axis / 2;
min_x_axis = 0;
if max(time_tau_average_force_pgns) > 0
    if max(time_tau_average_force_pgns) > round(...
            max(time_tau_average_force_pgns),...
            -max_order_magnitude_spacing_x_axis)
        max_x_axis = round(...
            max(time_tau_average_force_pgns),...
            -max_order_magnitude_spacing_x_axis) +...
            spacing_x_axis;
    else
        max_x_axis = round(...
            max(time_tau_average_force_pgns),...
            -max_order_magnitude_spacing_x_axis);
    end
else
    max_x_axis = 0;
end
min_y_axis =...
    min(average_force_equilibrium_x_pgns) -...
    max(standard_deviation_average_force_equilibrium_x_pgns);
max_y_axis =...
    max(average_force_equilibrium_x_pgns) +...
    max(standard_deviation_average_force_equilibrium_x_pgns);
fig = figure(12);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = turbo(length(distances_monomer_grafted_nanoparticles));
handles_line_mean =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    m = average_force_equilibrium_x_pgns...
        (1,index_column);
    x = [min_x_axis max_x_axis];
    y = m .* [1 1];
    handles_line_mean(index_column) = line(...
        x,...
        y,...
        'LineStyle','-.',...
        'Color',colormap(index_column,:),...
        'LineWidth',1); %#ok<*NASGU>
    hold on
end
handles_rectangle =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    m = average_force_equilibrium_x_pgns...
        (1,index_column);
    s = standard_deviation_average_force_equilibrium_x_pgns...
        (1,index_column);
    x = min_x_axis;
    y = m - s;
    w = max_x_axis - min_x_axis;
    h = 2 * s;
    handles_rectangle(index_column) = rectangle(...
        'Position',[x,y,w,h],...
        'LineStyle','none',...
        'FaceColor',horzcat(colormap(index_column,:)),...
        'FaceAlpha',.25); %#ok<*NASGU>
    hold on
end
handles_plot =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_plot(index_column) = plot(...
        time_tau_average_force_pgns(2:end),...
        average_forces_x_pgns(2:end,index_column),...
        'Color',colormap(index_column,:),...
        'LineWidth',2);
    hold on
end
handles_scatter =...
    gobjects(1,length(distances_monomer_grafted_nanoparticles));
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    handles_scatter(index_column) = scatter(...
        time_tau_average_force_pgns(2:end),...
        average_forces_x_pgns(2:end,index_column),...
        20,'o',...
        'MarkerEdgeColor',colormap(index_column,:),...
        'MarkerFaceColor',colormap(index_column,:),...
        'LineWidth',2); %#ok<*NASGU>
    hold on
end
handle_line_threshold = line(...
    threshold_time_tau_equilibrium.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.Exponent = floor(log10(max_x_axis));
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{t \: (\tau)}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTickLabel =...
    arrayfun(@(average_forces_x_pgns)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    average_forces_x_pgns),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{f_{PGN_{x}} \: (m \cdot \sigma \cdot \tau^{- 2})}$';
legend_entries =...
    strings([1 length(distances_monomer_grafted_nanoparticles)]);
for index_column = 1:length(distances_monomer_grafted_nanoparticles)
    legend_entries(index_column) = num2str(...
        distances_monomer_grafted_nanoparticles(index_column),...
        '%d');
end
lgd = legend(handles_plot,legend_entries);
lgd.Title.String = '$\mathrm{r_{0} \: (\sigma)}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.NumColumns = number_columns_legends_distances_mgs;
lgd.Location = 'eastoutside';
print(fig,strcat(...
    'f_pgn_x_vs_t_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of components of equilibrium force on a polymer-grafted
% nanoparticle of a pair versus distance between monomer-grafted
% nanoparticles.
min_x_axis = 0;
max_x_axis = max(...
    [distances_monomer_grafted_nanoparticles;...
    distances_monomer_grafted_nanoparticles_shifted_reduced]);
max_order_magnitude_spacing_y_axis = 0;
spacing_y_axis = 10^max_order_magnitude_spacing_y_axis;
if min(min(...
    [average_force_equilibrium_x_pgns;...
    average_force_equilibrium_y_pgns;...
    average_force_equilibrium_z_pgns])) <...
    0
    if min(min(...
    [average_force_equilibrium_x_pgns;...
    average_force_equilibrium_y_pgns;...
    average_force_equilibrium_z_pgns])) <...
    round(min(min(...
    [average_force_equilibrium_x_pgns;...
    average_force_equilibrium_y_pgns;...
    average_force_equilibrium_z_pgns])),...
    -max_order_magnitude_spacing_y_axis)
        min_y_axis = round(min(min(...
    [average_force_equilibrium_x_pgns;...
    average_force_equilibrium_y_pgns;...
    average_force_equilibrium_z_pgns])),...
    -max_order_magnitude_spacing_y_axis) -...
    spacing_y_axis;
    else
        min_y_axis = round(min(min(...
    [average_force_equilibrium_x_pgns;...
    average_force_equilibrium_y_pgns;...
    average_force_equilibrium_z_pgns])),...
    -max_order_magnitude_spacing_y_axis);
    end
else
    min_y_axis = 0;
end
if max(max(...
    [average_force_equilibrium_x_pgns;...
    average_force_equilibrium_y_pgns;...
    average_force_equilibrium_z_pgns])) >...
    0
    if max(max(...
    [average_force_equilibrium_x_pgns;...
    average_force_equilibrium_y_pgns;...
    average_force_equilibrium_z_pgns])) >...
    round(max(max(...
    [average_force_equilibrium_x_pgns;...
    average_force_equilibrium_y_pgns;...
    average_force_equilibrium_z_pgns])),...
    -max_order_magnitude_spacing_y_axis)
        max_y_axis = round(max(max(...
    [average_force_equilibrium_x_pgns;...
    average_force_equilibrium_y_pgns;...
    average_force_equilibrium_z_pgns])),...
    -max_order_magnitude_spacing_y_axis) +...
    spacing_y_axis;
    else
        max_y_axis = round(max(max(...
    [average_force_equilibrium_x_pgns;...
    average_force_equilibrium_y_pgns;...
    average_force_equilibrium_z_pgns])),...
    -max_order_magnitude_spacing_y_axis);
    end
else
    max_y_axis = 0;
end
fig = figure(13);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [0 max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [0 max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = lines;
handle_plot_average_force_equilibrium_y_pgns = plot(...
    distances_monomer_grafted_nanoparticles,...
    average_force_equilibrium_y_pgns,...
    'Color',colormap(2,:),...
    'LineWidth',2);
hold on
handle_scatter_average_force_equilibrium_y_pgns = scatter(...
    distances_monomer_grafted_nanoparticles,...
    average_force_equilibrium_y_pgns,...
    20,'o',...
    'MarkerEdgeColor',colormap(2,:),...
    'MarkerFaceColor',colormap(2,:),...
    'LineWidth',2); %#ok<*NASGU>
hold on
handle_plot_average_force_equilibrium_z_pgns = plot(...
    distances_monomer_grafted_nanoparticles,...
    average_force_equilibrium_z_pgns,...
    'Color',colormap(3,:),...
    'LineWidth',2);
hold on
handle_scatter_average_force_equilibrium_z_pgns = scatter(...
    distances_monomer_grafted_nanoparticles,...
    average_force_equilibrium_z_pgns,...
    20,'o',...
    'MarkerEdgeColor',colormap(3,:),...
    'MarkerFaceColor',colormap(3,:),...
    'LineWidth',2); %#ok<*NASGU>
hold on
handle_plot_average_force_equilibrium_x_pgns = plot(...
    distances_monomer_grafted_nanoparticles,...
    average_force_equilibrium_x_pgns,...
    'Color',colormap(1,:),...
    'LineWidth',2);
hold on
handle_scatter_average_force_equilibrium_x_pgns = scatter(...
    distances_monomer_grafted_nanoparticles,...
    average_force_equilibrium_x_pgns,...
    20,'o',...
    'MarkerEdgeColor',colormap(1,:),...
    'MarkerFaceColor',colormap(1,:),...
    'LineWidth',2); %#ok<*NASGU>
if abs(average_force_equilibrium_x_pgns(end)) >= .01
    hold on
    text(...
        (max_x_axis-0)./2,...
        (max_y_axis-min_y_axis)./2,...
        strcat(...
        '$\mathrm{\bf{Warning: \: | f_{PGN} (r_{end}) |',...
        '\geq 0.01 \: m \cdot \sigma \cdot \tau^{- 2}}}$'),...
        'FontSize',30,...
        'Color','[1 .141 0]',...
        'Interpreter','latex',...
        'HorizontalAlignment','center');
end
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XTickLabel =...
    arrayfun(@(distances_monomer_grafted_nanoparticles)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.XTick),'\.(\d+)','tokens')))),...
    distances_monomer_grafted_nanoparticles),ax.XTick,...
    'UniformOutput',false);
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{r \: (\sigma)}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTickLabel =...
    arrayfun(@(average_force_equilibrium_x_pgns)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    average_force_equilibrium_x_pgns),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{f_{PGN} \: (m \cdot \sigma \cdot \tau^{- 2})}$';
lgd = legend(...
    [handle_plot_average_force_equilibrium_x_pgns...
    handle_plot_average_force_equilibrium_y_pgns...
    handle_plot_average_force_equilibrium_z_pgns],...
    '$\mathrm{x}$','$\mathrm{y}$','$\mathrm{z}$');
lgd.Title.String = '$\mathrm{Component}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.Location = 'northeast';
print(fig,strcat(...
    'f_pgn_vs_r_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of x component of equilibrium force on a polymer-grafted
% nanoparticle of a pair and derivative of potential of mean force versus
% distance between monomer-grafted nanoparticles. The different curves are
% expected to match.
min_x_axis = 0;
max_x_axis = max(...
    [distances_monomer_grafted_nanoparticles;...
    distances_monomer_grafted_nanoparticles_shifted_reduced]);
max_order_magnitude_spacing_y_axis = 0;
spacing_y_axis = 10^max_order_magnitude_spacing_y_axis;
if min(min(...
    [average_force_equilibrium_x_pgns...
    average_force_pgns_check])) <...
    0
    if min(min(...
    [average_force_equilibrium_x_pgns...
    average_force_pgns_check])) <...
    round(min(min(...
    [average_force_equilibrium_x_pgns...
    average_force_pgns_check])),...
    -max_order_magnitude_spacing_y_axis)
        min_y_axis = round(min(min(...
    [average_force_equilibrium_x_pgns...
    average_force_pgns_check])),...
    -max_order_magnitude_spacing_y_axis) -...
    spacing_y_axis;
    else
        min_y_axis = round(min(min(...
    [average_force_equilibrium_x_pgns...
    average_force_pgns_check])),...
    -max_order_magnitude_spacing_y_axis);
    end
else
    min_y_axis = 0;
end
if max(max(...
    [average_force_equilibrium_x_pgns...
    average_force_pgns_check])) >...
    0
    if max(max(...
    [average_force_equilibrium_x_pgns...
    average_force_pgns_check])) >...
    round(max(max(...
    [average_force_equilibrium_x_pgns...
    average_force_pgns_check])),...
    -max_order_magnitude_spacing_y_axis)
        max_y_axis = round(max(max(...
    [average_force_equilibrium_x_pgns...
    average_force_pgns_check])),...
    -max_order_magnitude_spacing_y_axis) +...
    spacing_y_axis;
    else
        max_y_axis = round(max(max(...
    [average_force_equilibrium_x_pgns...
    average_force_pgns_check])),...
    -max_order_magnitude_spacing_y_axis);
    end
else
    max_y_axis = 0;
end
fig = figure(14);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [0 max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [0 max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = lines;
handle_plot_average_force_equilibrium_x_pgns = plot(...
    distances_monomer_grafted_nanoparticles,...
    average_force_equilibrium_x_pgns,...
    'Color',colormap(1,:),...
    'LineWidth',2);
hold on
handle_scatter_average_force_equilibrium_x_pgns = scatter(...
    distances_monomer_grafted_nanoparticles,...
    average_force_equilibrium_x_pgns,...
    20,'o',...
    'MarkerEdgeColor',colormap(1,:),...
    'MarkerFaceColor',colormap(1,:),...
    'LineWidth',2); %#ok<*NASGU>
hold on
handle_plot_average_force_pgns_check = plot(...
    distances_monomer_grafted_nanoparticles_shifted_reduced,...
    average_force_pgns_check,...
    'Color',colormap(4,:),...
    'LineWidth',2);
hold on
handle_scatter_average_force_pgns_check = scatter(...
    distances_monomer_grafted_nanoparticles_shifted_reduced,...
    average_force_pgns_check,...
    20,'o',...
    'MarkerEdgeColor',colormap(4,:),...
    'MarkerFaceColor',colormap(4,:),...
    'LineWidth',2); %#ok<*NASGU>
if abs(average_force_equilibrium_x_pgns(end)) >= .01
    hold on
    text(...
        (max_x_axis-0)./2,...
        (max_y_axis-min_y_axis)./2,...
        strcat(...
        '$\mathrm{\bf{Warning: \: | f_{PGN} (r_{end}) |',...
        '\geq 0.01 \: m \cdot \sigma \cdot \tau^{- 2}}}$'),...
        'FontSize',30,...
        'Color','[1 .141 0]',...
        'Interpreter','latex',...
        'HorizontalAlignment','center');
end
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XTickLabel =...
    arrayfun(@(distances_monomer_grafted_nanoparticles)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.XTick),'\.(\d+)','tokens')))),...
    distances_monomer_grafted_nanoparticles),ax.XTick,...
    'UniformOutput',false);
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String =...
    '$\mathrm{r \: (\sigma)}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTickLabel =...
    arrayfun(@(average_force_equilibrium_x_pgns)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    average_force_equilibrium_x_pgns),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String =...
    '$\mathrm{f_{PGN} \: (m \cdot \sigma \cdot \tau^{- 2})}$';
lgd = legend(...
    [handle_plot_average_force_equilibrium_x_pgns...
    handle_plot_average_force_pgns_check],...
    '$\mathrm{x_{calculated}}$',...
    '$\mathrm{x_{recalculated}}$');
lgd.Title.String = '$\mathrm{Component}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.Location = 'northeast';
print(fig,strcat(...
    'f_pgn_vs_r_check_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of potential of mean force versus distance between
% monomer-grafted nanoparticles.
min_x_axis = 0;
max_x_axis = max(distances_monomer_grafted_nanoparticles);
max_order_magnitude_spacing_y_axis = 1;
spacing_y_axis = 10^max_order_magnitude_spacing_y_axis;
if min(potential_of_mean_force_pgns) < 0
    if min(potential_of_mean_force_pgns) < round(...
            min(potential_of_mean_force_pgns),...
            -max_order_magnitude_spacing_y_axis)
        min_y_axis = round(...
            min(potential_of_mean_force_pgns),...
            -max_order_magnitude_spacing_y_axis) -...
            spacing_y_axis;
    else
        min_y_axis = round(...
            min(potential_of_mean_force_pgns),...
            -max_order_magnitude_spacing_y_axis);
    end
else
    min_y_axis = 0;
end
max_y_axis = 30;
fig = figure(15);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [0 max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [0 max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = lines;
handle_plot_potential_of_mean_force_pgns = plot(...
    distances_monomer_grafted_nanoparticles,...
    potential_of_mean_force_pgns,...
    'Color',colormap(1,:),...
    'LineWidth',2);
hold on
handle_scatter_potential_of_mean_force_pgns = scatter(...
    distances_monomer_grafted_nanoparticles,...
    potential_of_mean_force_pgns,...
    20,'o',...
    'MarkerEdgeColor',colormap(1,:),...
    'MarkerFaceColor',colormap(1,:),...
    'LineWidth',2); %#ok<*NASGU>
hold on
handle_plot_truncated_potential_of_mean_force_pgns = plot(...
    truncated_distances_monomer_grafted_nanoparticles,...
    truncated_potential_of_mean_force_pgns,...
    'Color',colormap(2,:),...
    'LineWidth',2);
hold on
handle_scatter_truncated_potential_of_mean_force_pgns = scatter(...
    truncated_distances_monomer_grafted_nanoparticles,...
    truncated_potential_of_mean_force_pgns,...
    20,'o',...
    'MarkerEdgeColor',colormap(2,:),...
    'MarkerFaceColor',colormap(2,:),...
    'LineWidth',2); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XTickLabel =...
    arrayfun(@(truncated_distances_monomer_grafted_nanoparticles)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.XTick),'\.(\d+)','tokens')))),...
    truncated_distances_monomer_grafted_nanoparticles),ax.XTick,...
    'UniformOutput',false);
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String = '$\mathrm{r \: (\sigma)}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTickLabel =...
    arrayfun(@(truncated_potential_of_mean_force_pgns)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    truncated_potential_of_mean_force_pgns),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String = '$\mathrm{w_{PGN} \: (k_{B} T)}$';
print(fig,strcat(...
    'w_pgn_vs_r_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of potential of mean force versus normalized distance between
% monomer-grafted nanoparticles.
min_x_axis = 0;
max_x_axis = max(normalized_distances_monomer_grafted_nanoparticles);
max_order_magnitude_spacing_y_axis = 1;
spacing_y_axis = 10^max_order_magnitude_spacing_y_axis;
if min(potential_of_mean_force_pgns) < 0
    if min(potential_of_mean_force_pgns) < round(...
            min(potential_of_mean_force_pgns),...
            -max_order_magnitude_spacing_y_axis)
        min_y_axis = round(...
            min(potential_of_mean_force_pgns),...
            -max_order_magnitude_spacing_y_axis) -...
            spacing_y_axis;
    else
        min_y_axis = round(...
            min(potential_of_mean_force_pgns),...
            -max_order_magnitude_spacing_y_axis);
    end
else
    min_y_axis = 0;
end
max_y_axis = 30;
fig = figure(16);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = lines;
handle_plot_potential_of_mean_force_pgns = plot(...
    normalized_distances_monomer_grafted_nanoparticles,...
    potential_of_mean_force_pgns,...
    'Color',colormap(1,:),...
    'LineWidth',2);
hold on
handle_scatter_potential_of_mean_force_pgns = scatter(...
    normalized_distances_monomer_grafted_nanoparticles,...
    potential_of_mean_force_pgns,...
    20,'o',...
    'MarkerEdgeColor',colormap(1,:),...
    'MarkerFaceColor',colormap(1,:),...
    'LineWidth',2); %#ok<*NASGU>
hold on
handle_plot_truncated_potential_of_mean_force_pgns = plot(...
    truncated_normalized_distances_monomer_grafted_nanoparticles,...
    truncated_potential_of_mean_force_pgns,...
    'Color',colormap(2,:),...
    'LineWidth',2);
hold on
handle_scatter_truncated_potential_of_mean_force_pgns = scatter(...
    truncated_normalized_distances_monomer_grafted_nanoparticles,...
    truncated_potential_of_mean_force_pgns,...
    20,'o',...
    'MarkerEdgeColor',colormap(2,:),...
    'MarkerFaceColor',colormap(2,:),...
    'LineWidth',2); %#ok<*NASGU>
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = unique([max_x_axis,ax.XTick]);
ax.XAxisLocation = 'bottom';
ax.XAxis.TickLabelFormat = '%.1f';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String = '$\mathrm{r \: (d_{0})}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTickLabel =...
    arrayfun(@(truncated_potential_of_mean_force_pgns)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    truncated_potential_of_mean_force_pgns),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String = '$\mathrm{w_{PGN} \: (k_{B} T)}$';
print(fig,strcat(...
    'w_pgn_vs_r^*_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')

% Plotting of pair potential energy versus intra-particle distance by
% types of particles in pair interactions.
spacing_x_axis = 1;
min_x_axis = 0;
max_x_axis = max(...
    [distance_pair_potential_1_1;...
    distance_pair_potential_1_2;...
    distance_pair_potential_1_3;...
    distance_pair_potential_2_2;...
    distance_pair_potential_2_3;...
    distance_pair_potential_3_3]);
max_order_magnitude_spacing_y_axis = 0;
spacing_y_axis = 10^max_order_magnitude_spacing_y_axis / 2;
if min(min(...
    [energy_pair_potential_1_1;...
    energy_pair_potential_1_2;...
    energy_pair_potential_1_3(find(...
    energy_pair_potential_1_3==-Inf)+1:end);...
    energy_pair_potential_2_2;...
    energy_pair_potential_2_3(find(...
    energy_pair_potential_1_3==-Inf)+1:end);...
    energy_pair_potential_3_3])) <...
    0
    if min(min(...
    [energy_pair_potential_1_1;...
    energy_pair_potential_1_2;...
    energy_pair_potential_1_3(find(...
    energy_pair_potential_1_3==-Inf)+1:end);...
    energy_pair_potential_2_2;...
    energy_pair_potential_2_3(find(...
    energy_pair_potential_1_3==-Inf)+1:end);...
    energy_pair_potential_3_3])) <...
    round(min(min(...
    [energy_pair_potential_1_1;...
    energy_pair_potential_1_2;...
    energy_pair_potential_1_3(find(...
    energy_pair_potential_1_3==-Inf)+1:end);...
    energy_pair_potential_2_2;...
    energy_pair_potential_2_3(find(...
    energy_pair_potential_1_3==-Inf)+1:end);...
    energy_pair_potential_3_3])),...
    max_order_magnitude_spacing_y_axis)
        min_y_axis = round(min(min(...
    [energy_pair_potential_1_1;...
    energy_pair_potential_1_2;...
    energy_pair_potential_1_3(find(...
    energy_pair_potential_1_3==-Inf)+1:end);...
    energy_pair_potential_2_2;...
    energy_pair_potential_2_3(find(...
    energy_pair_potential_1_3==-Inf)+1:end);...
    energy_pair_potential_3_3])),...
    max_order_magnitude_spacing_y_axis) -...
    spacing_y_axis;
    else
        min_y_axis = round(min(min(...
    [energy_pair_potential_1_1;...
    energy_pair_potential_1_2;...
    energy_pair_potential_1_3(find(...
    energy_pair_potential_1_3==-Inf)+1:end);...
    energy_pair_potential_2_2;...
    energy_pair_potential_2_3(find(...
    energy_pair_potential_1_3==-Inf)+1:end);...
    energy_pair_potential_3_3])),...
    max_order_magnitude_spacing_y_axis);
    end
else
    min_y_axis = 0;
end
max_y_axis = 1;
fig = figure(17);
fig.OuterPosition = [0 50 1440 940];
handle_line_box_top = line(...
    [min_x_axis max_x_axis],...
    max_y_axis.*[1 1],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_box_right = line(...
    max_x_axis.*[1 1],...
    [min_y_axis max_y_axis],...
    'Color','k','LineWidth',2); %#ok<*NASGU>
hold on
handle_line_x_axis = line(...
    [min_x_axis max_x_axis],...
    [0 0],...
    'Color','[.5 .5 .5]','LineWidth',1); %#ok<*NASGU>
hold on
colormap = lines;
handle_plot_pair_potential_1_1 = plot(...
    distance_pair_potential_1_1,...
    energy_pair_potential_1_1,...
    'Color',colormap(1,:),...
    'LineWidth',2);
hold on
handle_plot_pair_potential_1_2 = plot(...
    distance_pair_potential_1_2,...
    energy_pair_potential_1_2,...
    'Color',colormap(2,:),...
    'LineWidth',2);
hold on
handle_plot_pair_potential_1_3 = plot(...
    distance_pair_potential_1_3(find(...
    energy_pair_potential_1_3==min(energy_pair_potential_1_3))+1:end),...
    energy_pair_potential_1_3(find(...
    energy_pair_potential_1_3==min(energy_pair_potential_1_3))+1:end),...
    'Color',colormap(3,:),...
    'LineWidth',2);
hold on
handle_plot_pair_potential_2_2 = plot(...
    distance_pair_potential_2_2,...
    energy_pair_potential_2_2,...
    'Color',colormap(4,:),...
    'LineWidth',2);
hold on
handle_plot_pair_potential_2_3 = plot(...
    distance_pair_potential_2_3(find(...
    energy_pair_potential_2_3==min(energy_pair_potential_2_3))+1:end),...
    energy_pair_potential_2_3(find(...
    energy_pair_potential_2_3==min(energy_pair_potential_2_3))+1:end),...
    'Color',colormap(5,:),...
    'LineWidth',2);
hold on
handle_plot_pair_potential_3_3 = plot(...
    distance_pair_potential_3_3,...
    energy_pair_potential_3_3,...
    'Color',colormap(6,:),...
    'LineWidth',2);
hold off
box off
ax = gca;
ax.LineWidth = 2;
ax.TickDir = 'out';
ax.TickLabelInterpreter = 'latex';
ax.XLim = [min_x_axis max_x_axis];
ax.XTick = min_x_axis:spacing_x_axis:max_x_axis;
ax.XAxisLocation = 'bottom';
ax.XAxis.FontSize = 24;
ax.XLabel.FontSize = 30;
ax.XLabel.Interpreter = 'latex';
ax.XLabel.String = '$\mathrm{r \: (\sigma)}$';
ax.YLim = [min_y_axis max_y_axis];
ax.YTickLabel =...
    arrayfun(@(energy_pair_potential_3_3)...
    sprintf(sprintf('%%.%df',max(cellfun(@(cell)...
    length(cell{1}),regexp(num2str(ax.YTick),'\.(\d+)','tokens')))),...
    energy_pair_potential_3_3),ax.YTick,...
    'UniformOutput',false);
ax.YAxisLocation = 'left';
ax.YAxis.FontSize = 24;
ax.YLabel.FontSize = 30;
ax.YLabel.Interpreter = 'latex';
ax.YLabel.String = '$\mathrm{u \: (k_{B} T)}$';
lgd = legend(...
    [handle_plot_pair_potential_1_1...
    handle_plot_pair_potential_1_2...
    handle_plot_pair_potential_1_3...
    handle_plot_pair_potential_2_2...
    handle_plot_pair_potential_2_3...
    handle_plot_pair_potential_3_3],...
    '1-1',...
    '1-2',...
    '1-3',...
    '2-2',...
    '2-3',...
    '3-3');
lgd.Title.String = '$\mathrm{Type}$';
lgd.Interpreter = 'latex';
lgd.FontSize = 18;
lgd.Location = 'northeast';
print(fig,strcat(...
    'u_vs_r_',...
    sprintf('%7.6f',radius_nanoparticles),'_',...
    sprintf('%i',length_grafted_chains),'_',...
    sprintf('%7.6f',target_grafting_density),'_',...
    sprintf('%7.6f',epsilon_attractive),...
    '.tiff'),'-dtiffn')
